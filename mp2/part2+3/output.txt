
printbin.lnx:     file format elf32-i386


Disassembly of section .text:

00100100 <_start>:
  100100:	bc f0 ff 3f 00       	mov    $0x3ffff0,%esp
  100105:	bd 00 00 00 00       	mov    $0x0,%ebp
  10010a:	e8 01 00 00 00       	call   100110 <_startupc>
  10010f:	cc                   	int3   

00100110 <_startupc>:

extern void clr_bss(void);
extern void init_devio(void);
extern void main(void);
void _startupc()
{
  100110:	f3 0f 1e fb          	endbr32 
  100114:	55                   	push   %ebp
  100115:	89 e5                	mov    %esp,%ebp
  100117:	53                   	push   %ebx
  100118:	83 ec 04             	sub    $0x4,%esp
  10011b:	e8 1c 00 00 00       	call   10013c <__x86.get_pc_thunk.bx>
  100120:	81 c3 6c 1b 00 00    	add    $0x1b6c,%ebx
  clr_bss();			/* clear BSS area (uninitialized data) */
  100126:	e8 9a 00 00 00       	call   1001c5 <clr_bss>
  init_devio();			/* latch onto Tutor-supplied info, code */
  10012b:	e8 b7 01 00 00       	call   1002e7 <init_devio>
  (void)main();			/* execute user-supplied main */
  100130:	e8 0b 00 00 00       	call   100140 <main>
}
  100135:	90                   	nop
  100136:	83 c4 04             	add    $0x4,%esp
  100139:	5b                   	pop    %ebx
  10013a:	5d                   	pop    %ebp
  10013b:	c3                   	ret    

0010013c <__x86.get_pc_thunk.bx>:
  10013c:	8b 1c 24             	mov    (%esp),%ebx
  10013f:	c3                   	ret    

00100140 <main>:

#include <stdio.h>
extern char *_printbin(unsigned char);

int main(void)
{
  100140:	f3 0f 1e fb          	endbr32 
  100144:	8d 4c 24 04          	lea    0x4(%esp),%ecx
  100148:	83 e4 f0             	and    $0xfffffff0,%esp
  10014b:	ff 71 fc             	pushl  -0x4(%ecx)
  10014e:	55                   	push   %ebp
  10014f:	89 e5                	mov    %esp,%ebp
  100151:	53                   	push   %ebx
  100152:	51                   	push   %ecx
  100153:	83 ec 10             	sub    $0x10,%esp
  100156:	e8 e1 ff ff ff       	call   10013c <__x86.get_pc_thunk.bx>
  10015b:	81 c3 31 1b 00 00    	add    $0x1b31,%ebx
  unsigned int x;

  printf("enter the character's ascii value in hex: \n");
  100161:	83 ec 0c             	sub    $0xc,%esp
  100164:	8d 83 a8 fa ff ff    	lea    -0x558(%ebx),%eax
  10016a:	50                   	push   %eax
  10016b:	e8 67 00 00 00       	call   1001d7 <printf>
  100170:	83 c4 10             	add    $0x10,%esp
  scanf("%x",&x);
  100173:	83 ec 08             	sub    $0x8,%esp
  100176:	8d 45 f4             	lea    -0xc(%ebp),%eax
  100179:	50                   	push   %eax
  10017a:	8d 83 d4 fa ff ff    	lea    -0x52c(%ebx),%eax
  100180:	50                   	push   %eax
  100181:	e8 94 00 00 00       	call   10021a <scanf>
  100186:	83 c4 10             	add    $0x10,%esp
  printf("The binary format for character %c is %s\n", 
                                 x,   _printbin((unsigned char)x));
  100189:	8b 45 f4             	mov    -0xc(%ebp),%eax
  printf("The binary format for character %c is %s\n", 
  10018c:	25 ff 00 00 00       	and    $0xff,%eax
  100191:	83 ec 0c             	sub    $0xc,%esp
  100194:	50                   	push   %eax
  100195:	e8 10 1b 00 00       	call   101caa <_printbin>
  10019a:	83 c4 10             	add    $0x10,%esp
  10019d:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1001a0:	83 ec 04             	sub    $0x4,%esp
  1001a3:	50                   	push   %eax
  1001a4:	52                   	push   %edx
  1001a5:	8d 83 d8 fa ff ff    	lea    -0x528(%ebx),%eax
  1001ab:	50                   	push   %eax
  1001ac:	e8 26 00 00 00       	call   1001d7 <printf>
  1001b1:	83 c4 10             	add    $0x10,%esp
  return 0;
  1001b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1001b9:	8d 65 f8             	lea    -0x8(%ebp),%esp
  1001bc:	59                   	pop    %ecx
  1001bd:	5b                   	pop    %ebx
  1001be:	5d                   	pop    %ebp
  1001bf:	8d 61 fc             	lea    -0x4(%ecx),%esp
  1001c2:	c3                   	ret    

001001c3 <breakpoint>:
  1001c3:	cc                   	int3   
  1001c4:	c3                   	ret    

001001c5 <clr_bss>:
  1001c5:	31 c0                	xor    %eax,%eax
  1001c7:	bf 41 1e 10 00       	mov    $0x101e41,%edi
  1001cc:	b9 48 1e 10 00       	mov    $0x101e48,%ecx
  1001d1:	29 f9                	sub    %edi,%ecx
  1001d3:	fc                   	cld    
  1001d4:	f3 aa                	rep stos %al,%es:(%edi)
  1001d6:	c3                   	ret    

001001d7 <printf>:
#include <stdarg.h>

extern void _fdoprnt(char *, va_list, int (*)(int, char), int);

int printf(const char *fmt, ...)
{
  1001d7:	f3 0f 1e fb          	endbr32 
  1001db:	55                   	push   %ebp
  1001dc:	89 e5                	mov    %esp,%ebp
  1001de:	53                   	push   %ebx
  1001df:	83 ec 14             	sub    $0x14,%esp
  1001e2:	e8 2f 00 00 00       	call   100216 <__x86.get_pc_thunk.ax>
  1001e7:	05 a5 1a 00 00       	add    $0x1aa5,%eax
    va_list ap;
    extern int putc(int, char);

    va_start(ap, fmt);
  1001ec:	8d 55 0c             	lea    0xc(%ebp),%edx
  1001ef:	89 55 f4             	mov    %edx,-0xc(%ebp)
    _fdoprnt((char *)fmt, ap, putc, CONSOLE);
  1001f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1001f5:	6a 64                	push   $0x64
  1001f7:	c7 c1 46 04 10 00    	mov    $0x100446,%ecx
  1001fd:	51                   	push   %ecx
  1001fe:	52                   	push   %edx
  1001ff:	ff 75 08             	pushl  0x8(%ebp)
  100202:	89 c3                	mov    %eax,%ebx
  100204:	e8 a0 0d 00 00       	call   100fa9 <_fdoprnt>
  100209:	83 c4 10             	add    $0x10,%esp
    va_end(ap);

    return 0;
  10020c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100211:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100214:	c9                   	leave  
  100215:	c3                   	ret    

00100216 <__x86.get_pc_thunk.ax>:
  100216:	8b 04 24             	mov    (%esp),%eax
  100219:	c3                   	ret    

0010021a <scanf>:
/*-----------------------------------------------------------------------
 *  scanf  --  read from the console according to a format
 *------------------------------------------------------------------------
 */
int scanf(char *fmt, int args)
{
  10021a:	f3 0f 1e fb          	endbr32 
  10021e:	55                   	push   %ebp
  10021f:	89 e5                	mov    %esp,%ebp
  100221:	53                   	push   %ebx
  100222:	83 ec 14             	sub    $0x14,%esp
  100225:	e8 ec ff ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  10022a:	05 62 1a 00 00       	add    $0x1a62,%eax
  int	buf;			/* for one-char buffer */

  buf = EMPTYFLAG;
  10022f:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
  return(_doscan(fmt, (int **)&args, getch, ungetch, CONSOLE, (int)&buf));
  100236:	8d 55 f4             	lea    -0xc(%ebp),%edx
  100239:	83 ec 08             	sub    $0x8,%esp
  10023c:	52                   	push   %edx
  10023d:	6a 64                	push   $0x64
  10023f:	8d 90 34 e6 ff ff    	lea    -0x19cc(%eax),%edx
  100245:	52                   	push   %edx
  100246:	8d 90 d7 e5 ff ff    	lea    -0x1a29(%eax),%edx
  10024c:	52                   	push   %edx
  10024d:	8d 55 0c             	lea    0xc(%ebp),%edx
  100250:	52                   	push   %edx
  100251:	ff 75 08             	pushl  0x8(%ebp)
  100254:	89 c3                	mov    %eax,%ebx
  100256:	e8 52 06 00 00       	call   1008ad <_doscan>
  10025b:	83 c4 20             	add    $0x20,%esp
}
  10025e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100261:	c9                   	leave  
  100262:	c3                   	ret    

00100263 <getch>:
/*------------------------------------------------------------------------
 *  getch  --  get a character from a device with pushback
 *------------------------------------------------------------------------
 */
static int getch(int dev, int *buf)
{
  100263:	f3 0f 1e fb          	endbr32 
  100267:	55                   	push   %ebp
  100268:	89 e5                	mov    %esp,%ebp
  10026a:	53                   	push   %ebx
  10026b:	83 ec 14             	sub    $0x14,%esp
  10026e:	e8 a3 ff ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  100273:	05 19 1a 00 00       	add    $0x1a19,%eax
        int ch;

	if( *buf&EMPTYFLAG)
  100278:	8b 55 0c             	mov    0xc(%ebp),%edx
  10027b:	8b 12                	mov    (%edx),%edx
  10027d:	81 e2 00 10 00 00    	and    $0x1000,%edx
  100283:	85 d2                	test   %edx,%edx
  100285:	74 1a                	je     1002a1 <getch+0x3e>
		*buf = getc(dev)&0x7f; /* make sure one there */
  100287:	83 ec 0c             	sub    $0xc,%esp
  10028a:	ff 75 08             	pushl  0x8(%ebp)
  10028d:	89 c3                	mov    %eax,%ebx
  10028f:	e8 6f 03 00 00       	call   100603 <getc>
  100294:	83 c4 10             	add    $0x10,%esp
  100297:	83 e0 7f             	and    $0x7f,%eax
  10029a:	89 c2                	mov    %eax,%edx
  10029c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10029f:	89 10                	mov    %edx,(%eax)
	ch = *buf;		/* pick up buffered char */
  1002a1:	8b 45 0c             	mov    0xc(%ebp),%eax
  1002a4:	8b 00                	mov    (%eax),%eax
  1002a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	*buf |= EMPTYFLAG;		/* none there now */
  1002a9:	8b 45 0c             	mov    0xc(%ebp),%eax
  1002ac:	8b 00                	mov    (%eax),%eax
  1002ae:	80 cc 10             	or     $0x10,%ah
  1002b1:	89 c2                	mov    %eax,%edx
  1002b3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1002b6:	89 10                	mov    %edx,(%eax)
	return(ch);
  1002b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  1002bb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1002be:	c9                   	leave  
  1002bf:	c3                   	ret    

001002c0 <ungetch>:
/*------------------------------------------------------------------------
 *  ungetch  --  pushback a character for getch
 *------------------------------------------------------------------------
 */
static int ungetch(int dev, int *buf)
{
  1002c0:	f3 0f 1e fb          	endbr32 
  1002c4:	55                   	push   %ebp
  1002c5:	89 e5                	mov    %esp,%ebp
  1002c7:	e8 4a ff ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  1002cc:	05 c0 19 00 00       	add    $0x19c0,%eax
	*buf &= (~EMPTYFLAG);	/* turn off emptyflag */
  1002d1:	8b 45 0c             	mov    0xc(%ebp),%eax
  1002d4:	8b 00                	mov    (%eax),%eax
  1002d6:	80 e4 ef             	and    $0xef,%ah
  1002d9:	89 c2                	mov    %eax,%edx
  1002db:	8b 45 0c             	mov    0xc(%ebp),%eax
  1002de:	89 10                	mov    %edx,(%eax)
	return 0;
  1002e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1002e5:	5d                   	pop    %ebp
  1002e6:	c3                   	ret    

001002e7 <init_devio>:
#include <params.h>

SysAPI2 *sysapi2 = 0;		/* master pointer to Tutor dispatch table */

void init_devio()
{
  1002e7:	f3 0f 1e fb          	endbr32 
  1002eb:	55                   	push   %ebp
  1002ec:	89 e5                	mov    %esp,%ebp
  1002ee:	e8 23 ff ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  1002f3:	05 99 19 00 00       	add    $0x1999,%eax
#ifdef NEED_SCREEN_INFO
  screen_info = SCREEN_INFO;
#endif
  sysapi2 = SYS_API;	/* establish master pointer */
  1002f8:	ba 04 51 05 00       	mov    $0x55104,%edx
  1002fd:	8b 12                	mov    (%edx),%edx
  1002ff:	89 90 b8 01 00 00    	mov    %edx,0x1b8(%eax)
}
  100305:	90                   	nop
  100306:	5d                   	pop    %ebp
  100307:	c3                   	ret    

00100308 <init>:
#endif

/* initialize device drivers--normally only used by kernel */
unsigned long init(int dev, unsigned long kmem_start)
{
  100308:	f3 0f 1e fb          	endbr32 
  10030c:	55                   	push   %ebp
  10030d:	89 e5                	mov    %esp,%ebp
  10030f:	53                   	push   %ebx
  100310:	83 ec 04             	sub    $0x4,%esp
  100313:	e8 91 05 00 00       	call   1008a9 <__x86.get_pc_thunk.cx>
  100318:	81 c1 74 19 00 00    	add    $0x1974,%ecx
  if (dev < 0 || dev >= MAXSYSDEVS || !sys_devname(dev)[0])
  10031e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  100322:	78 28                	js     10034c <init+0x44>
  100324:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  100328:	7f 22                	jg     10034c <init+0x44>
  10032a:	8b 81 b8 01 00 00    	mov    0x1b8(%ecx),%eax
  100330:	8b 18                	mov    (%eax),%ebx
  100332:	8b 55 08             	mov    0x8(%ebp),%edx
  100335:	89 d0                	mov    %edx,%eax
  100337:	c1 e0 02             	shl    $0x2,%eax
  10033a:	01 d0                	add    %edx,%eax
  10033c:	01 c0                	add    %eax,%eax
  10033e:	01 d0                	add    %edx,%eax
  100340:	c1 e0 02             	shl    $0x2,%eax
  100343:	01 d8                	add    %ebx,%eax
  100345:	8a 40 18             	mov    0x18(%eax),%al
  100348:	84 c0                	test   %al,%al
  10034a:	75 05                	jne    100351 <init+0x49>
    return kmem_start;
  10034c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10034f:	eb 2b                	jmp    10037c <init+0x74>
  return sys_init(dev, kmem_start);
  100351:	8b 81 b8 01 00 00    	mov    0x1b8(%ecx),%eax
  100357:	8b 08                	mov    (%eax),%ecx
  100359:	8b 55 08             	mov    0x8(%ebp),%edx
  10035c:	89 d0                	mov    %edx,%eax
  10035e:	c1 e0 02             	shl    $0x2,%eax
  100361:	01 d0                	add    %edx,%eax
  100363:	01 c0                	add    %eax,%eax
  100365:	01 d0                	add    %edx,%eax
  100367:	c1 e0 02             	shl    $0x2,%eax
  10036a:	01 c8                	add    %ecx,%eax
  10036c:	8b 00                	mov    (%eax),%eax
  10036e:	83 ec 08             	sub    $0x8,%esp
  100371:	ff 75 0c             	pushl  0xc(%ebp)
  100374:	ff 75 08             	pushl  0x8(%ebp)
  100377:	ff d0                	call   *%eax
  100379:	83 c4 10             	add    $0x10,%esp
}
  10037c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10037f:	c9                   	leave  
  100380:	c3                   	ret    

00100381 <rawputc>:

/* output one char, by polling or equivalent, no interpretation
 * of char, but dev CONSOLE->console_dev mapping provided */
int rawputc(int dev, char ch)
{
  100381:	f3 0f 1e fb          	endbr32 
  100385:	55                   	push   %ebp
  100386:	89 e5                	mov    %esp,%ebp
  100388:	53                   	push   %ebx
  100389:	83 ec 14             	sub    $0x14,%esp
  10038c:	e8 ab fd ff ff       	call   10013c <__x86.get_pc_thunk.bx>
  100391:	81 c3 fb 18 00 00    	add    $0x18fb,%ebx
  100397:	8b 45 0c             	mov    0xc(%ebp),%eax
  10039a:	88 45 f4             	mov    %al,-0xc(%ebp)
  if (dev == CONSOLE)
  10039d:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  1003a1:	75 0e                	jne    1003b1 <rawputc+0x30>
    dev = sys_get_console_dev();
  1003a3:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1003a9:	8b 40 1c             	mov    0x1c(%eax),%eax
  1003ac:	ff d0                	call   *%eax
  1003ae:	89 45 08             	mov    %eax,0x8(%ebp)
  if (dev < 0 || dev >= MAXSYSDEVS || !sys_devname(dev)[0])
  1003b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1003b5:	78 28                	js     1003df <rawputc+0x5e>
  1003b7:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  1003bb:	7f 22                	jg     1003df <rawputc+0x5e>
  1003bd:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1003c3:	8b 08                	mov    (%eax),%ecx
  1003c5:	8b 55 08             	mov    0x8(%ebp),%edx
  1003c8:	89 d0                	mov    %edx,%eax
  1003ca:	c1 e0 02             	shl    $0x2,%eax
  1003cd:	01 d0                	add    %edx,%eax
  1003cf:	01 c0                	add    %eax,%eax
  1003d1:	01 d0                	add    %edx,%eax
  1003d3:	c1 e0 02             	shl    $0x2,%eax
  1003d6:	01 c8                	add    %ecx,%eax
  1003d8:	8a 40 18             	mov    0x18(%eax),%al
  1003db:	84 c0                	test   %al,%al
  1003dd:	75 07                	jne    1003e6 <rawputc+0x65>
    return -1;
  1003df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  1003e4:	eb 2e                	jmp    100414 <rawputc+0x93>
  return sys_putc(dev, ch);
  1003e6:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1003ec:	8b 08                	mov    (%eax),%ecx
  1003ee:	8b 55 08             	mov    0x8(%ebp),%edx
  1003f1:	89 d0                	mov    %edx,%eax
  1003f3:	c1 e0 02             	shl    $0x2,%eax
  1003f6:	01 d0                	add    %edx,%eax
  1003f8:	01 c0                	add    %eax,%eax
  1003fa:	01 d0                	add    %edx,%eax
  1003fc:	c1 e0 02             	shl    $0x2,%eax
  1003ff:	01 c8                	add    %ecx,%eax
  100401:	8b 40 04             	mov    0x4(%eax),%eax
  100404:	0f be 55 f4          	movsbl -0xc(%ebp),%edx
  100408:	83 ec 08             	sub    $0x8,%esp
  10040b:	52                   	push   %edx
  10040c:	ff 75 08             	pushl  0x8(%ebp)
  10040f:	ff d0                	call   *%eax
  100411:	83 c4 10             	add    $0x10,%esp
}
  100414:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100417:	c9                   	leave  
  100418:	c3                   	ret    

00100419 <delay>:

#ifndef SAPC_KERNEL  
/* a msec or so */
static void delay()
{
  100419:	f3 0f 1e fb          	endbr32 
  10041d:	55                   	push   %ebp
  10041e:	89 e5                	mov    %esp,%ebp
  100420:	83 ec 10             	sub    $0x10,%esp
  100423:	e8 ee fd ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  100428:	05 64 18 00 00       	add    $0x1864,%eax
  int i;

  for (i=0;i<20000;i++)
  10042d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  100434:	eb 03                	jmp    100439 <delay+0x20>
  100436:	ff 45 fc             	incl   -0x4(%ebp)
  100439:	81 7d fc 1f 4e 00 00 	cmpl   $0x4e1f,-0x4(%ebp)
  100440:	7e f4                	jle    100436 <delay+0x1d>
    ;
}
  100442:	90                   	nop
  100443:	90                   	nop
  100444:	c9                   	leave  
  100445:	c3                   	ret    

00100446 <putc>:
#endif

/* output one char, with lf-> crlf, CONSOLE->console_dev, 
 * broadcast if dev < 0, do debug protocol if live debugline */
int putc(int dev, char ch)
{
  100446:	f3 0f 1e fb          	endbr32 
  10044a:	55                   	push   %ebp
  10044b:	89 e5                	mov    %esp,%ebp
  10044d:	53                   	push   %ebx
  10044e:	83 ec 24             	sub    $0x24,%esp
  100451:	e8 e6 fc ff ff       	call   10013c <__x86.get_pc_thunk.bx>
  100456:	81 c3 36 18 00 00    	add    $0x1836,%ebx
  10045c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10045f:	88 45 e4             	mov    %al,-0x1c(%ebp)
  if (dev >= MAXSYSDEVS)
  100462:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  100466:	7e 0a                	jle    100472 <putc+0x2c>
    return -1;
  100468:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10046d:	e9 ff 00 00 00       	jmp    100571 <putc+0x12b>
  if ((dev == CONSOLE) && (sys_get_console_dev()<0))
  100472:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  100476:	75 16                	jne    10048e <putc+0x48>
  100478:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  10047e:	8b 40 1c             	mov    0x1c(%eax),%eax
  100481:	ff d0                	call   *%eax
  100483:	85 c0                	test   %eax,%eax
  100485:	79 07                	jns    10048e <putc+0x48>
    dev = -1;			/* initial broadcast */
  100487:	c7 45 08 ff ff ff ff 	movl   $0xffffffff,0x8(%ebp)
  if (dev < 0) {		/* broadcast */
  10048e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  100492:	79 2f                	jns    1004c3 <putc+0x7d>
    int i;

    for (i=0;i<MAXDEVS;i++)
  100494:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10049b:	eb 16                	jmp    1004b3 <putc+0x6d>
      putc(i, ch);		/* real devs */
  10049d:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
  1004a1:	83 ec 08             	sub    $0x8,%esp
  1004a4:	50                   	push   %eax
  1004a5:	ff 75 f4             	pushl  -0xc(%ebp)
  1004a8:	e8 99 ff ff ff       	call   100446 <putc>
  1004ad:	83 c4 10             	add    $0x10,%esp
    for (i=0;i<MAXDEVS;i++)
  1004b0:	ff 45 f4             	incl   -0xc(%ebp)
  1004b3:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
  1004b7:	7e e4                	jle    10049d <putc+0x57>
    return 0;
  1004b9:	b8 00 00 00 00       	mov    $0x0,%eax
  1004be:	e9 ae 00 00 00       	jmp    100571 <putc+0x12b>
  }
  /* non-broadcast-- */
  if (ch == 0)
  1004c3:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
  1004c7:	75 0a                	jne    1004d3 <putc+0x8d>
    return 0;
  1004c9:	b8 00 00 00 00       	mov    $0x0,%eax
  1004ce:	e9 9e 00 00 00       	jmp    100571 <putc+0x12b>
  if (dev == CONSOLE) {
  1004d3:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  1004d7:	75 43                	jne    10051c <putc+0xd6>
    int debug_dev;

    dev = sys_get_console_dev();
  1004d9:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1004df:	8b 40 1c             	mov    0x1c(%eax),%eax
  1004e2:	ff d0                	call   *%eax
  1004e4:	89 45 08             	mov    %eax,0x8(%ebp)
    if ((debug_dev = sys_get_debugline_dev())>=0) {
  1004e7:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1004ed:	8b 40 2c             	mov    0x2c(%eax),%eax
  1004f0:	ff d0                	call   *%eax
  1004f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1004f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1004f9:	78 21                	js     10051c <putc+0xd6>
      rawputc(DEBUG_CONSOLE,ch); /* output to debug console too */
  1004fb:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
  1004ff:	83 ec 08             	sub    $0x8,%esp
  100502:	50                   	push   %eax
  100503:	6a 63                	push   $0x63
  100505:	e8 77 fe ff ff       	call   100381 <rawputc>
  10050a:	83 c4 10             	add    $0x10,%esp
      if (dev == debug_dev)	/* if console is debugline */
  10050d:	8b 45 08             	mov    0x8(%ebp),%eax
  100510:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100513:	75 07                	jne    10051c <putc+0xd6>
	return 0;		/* only do debug protocol  */
  100515:	b8 00 00 00 00       	mov    $0x0,%eax
  10051a:	eb 55                	jmp    100571 <putc+0x12b>
    }
  }
#ifndef SAPC_KERNEL  
  if (dev == sys_get_hostline_dev())
  10051c:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  100522:	8b 40 24             	mov    0x24(%eax),%eax
  100525:	ff d0                	call   *%eax
  100527:	39 45 08             	cmp    %eax,0x8(%ebp)
  10052a:	75 05                	jne    100531 <putc+0xeb>
    delay();			/* be nice to host */
  10052c:	e8 e8 fe ff ff       	call   100419 <delay>
#endif
  if (ch == '\n') {
  100531:	80 7d e4 0a          	cmpb   $0xa,-0x1c(%ebp)
  100535:	75 22                	jne    100559 <putc+0x113>
    rawputc(dev, '\r');
  100537:	83 ec 08             	sub    $0x8,%esp
  10053a:	6a 0d                	push   $0xd
  10053c:	ff 75 08             	pushl  0x8(%ebp)
  10053f:	e8 3d fe ff ff       	call   100381 <rawputc>
  100544:	83 c4 10             	add    $0x10,%esp
    rawputc(dev, '\n');
  100547:	83 ec 08             	sub    $0x8,%esp
  10054a:	6a 0a                	push   $0xa
  10054c:	ff 75 08             	pushl  0x8(%ebp)
  10054f:	e8 2d fe ff ff       	call   100381 <rawputc>
  100554:	83 c4 10             	add    $0x10,%esp
  100557:	eb 13                	jmp    10056c <putc+0x126>
  } else {
    rawputc(dev, ch);
  100559:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
  10055d:	83 ec 08             	sub    $0x8,%esp
  100560:	50                   	push   %eax
  100561:	ff 75 08             	pushl  0x8(%ebp)
  100564:	e8 18 fe ff ff       	call   100381 <rawputc>
  100569:	83 c4 10             	add    $0x10,%esp
  }
  return 0;
  10056c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100571:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100574:	c9                   	leave  
  100575:	c3                   	ret    

00100576 <rawgetc>:

/* get one char from device by polling or equiv., no interp. of
 * char, but CONSOLE mapping provided */
int rawgetc(int dev)
{
  100576:	f3 0f 1e fb          	endbr32 
  10057a:	55                   	push   %ebp
  10057b:	89 e5                	mov    %esp,%ebp
  10057d:	53                   	push   %ebx
  10057e:	83 ec 04             	sub    $0x4,%esp
  100581:	e8 b6 fb ff ff       	call   10013c <__x86.get_pc_thunk.bx>
  100586:	81 c3 06 17 00 00    	add    $0x1706,%ebx
  if (dev == CONSOLE)
  10058c:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  100590:	75 0e                	jne    1005a0 <rawgetc+0x2a>
    dev = sys_get_console_dev();
  100592:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  100598:	8b 40 1c             	mov    0x1c(%eax),%eax
  10059b:	ff d0                	call   *%eax
  10059d:	89 45 08             	mov    %eax,0x8(%ebp)
  if (dev < 0 || dev >= MAXSYSDEVS || !sys_devname(dev)[0])
  1005a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1005a4:	78 28                	js     1005ce <rawgetc+0x58>
  1005a6:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  1005aa:	7f 22                	jg     1005ce <rawgetc+0x58>
  1005ac:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1005b2:	8b 08                	mov    (%eax),%ecx
  1005b4:	8b 55 08             	mov    0x8(%ebp),%edx
  1005b7:	89 d0                	mov    %edx,%eax
  1005b9:	c1 e0 02             	shl    $0x2,%eax
  1005bc:	01 d0                	add    %edx,%eax
  1005be:	01 c0                	add    %eax,%eax
  1005c0:	01 d0                	add    %edx,%eax
  1005c2:	c1 e0 02             	shl    $0x2,%eax
  1005c5:	01 c8                	add    %ecx,%eax
  1005c7:	8a 40 18             	mov    0x18(%eax),%al
  1005ca:	84 c0                	test   %al,%al
  1005cc:	75 07                	jne    1005d5 <rawgetc+0x5f>
    return -1;
  1005ce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  1005d3:	eb 29                	jmp    1005fe <rawgetc+0x88>
  return sys_getc(dev);
  1005d5:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1005db:	8b 08                	mov    (%eax),%ecx
  1005dd:	8b 55 08             	mov    0x8(%ebp),%edx
  1005e0:	89 d0                	mov    %edx,%eax
  1005e2:	c1 e0 02             	shl    $0x2,%eax
  1005e5:	01 d0                	add    %edx,%eax
  1005e7:	01 c0                	add    %eax,%eax
  1005e9:	01 d0                	add    %edx,%eax
  1005eb:	c1 e0 02             	shl    $0x2,%eax
  1005ee:	01 c8                	add    %ecx,%eax
  1005f0:	8b 40 08             	mov    0x8(%eax),%eax
  1005f3:	83 ec 0c             	sub    $0xc,%esp
  1005f6:	ff 75 08             	pushl  0x8(%ebp)
  1005f9:	ff d0                	call   *%eax
  1005fb:	83 c4 10             	add    $0x10,%esp
}
  1005fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100601:	c9                   	leave  
  100602:	c3                   	ret    

00100603 <getc>:

/* get one char from device by polling, echo it for CONSOLE,
   convert CR to newline, abort if requested */
int getc(int dev)
{
  100603:	f3 0f 1e fb          	endbr32 
  100607:	55                   	push   %ebp
  100608:	89 e5                	mov    %esp,%ebp
  10060a:	83 ec 18             	sub    $0x18,%esp
  10060d:	e8 04 fc ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  100612:	05 7a 16 00 00       	add    $0x167a,%eax
  int c = rawgetc(dev);
  100617:	83 ec 0c             	sub    $0xc,%esp
  10061a:	ff 75 08             	pushl  0x8(%ebp)
  10061d:	e8 54 ff ff ff       	call   100576 <rawgetc>
  100622:	83 c4 10             	add    $0x10,%esp
  100625:	89 45 f4             	mov    %eax,-0xc(%ebp)

  if (c<0)
  100628:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10062c:	79 07                	jns    100635 <getc+0x32>
    return -1;
  10062e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100633:	eb 3f                	jmp    100674 <getc+0x71>
  if (c==EOFCHAR)
  100635:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
  100639:	75 07                	jne    100642 <getc+0x3f>
    return EOF;
  10063b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100640:	eb 32                	jmp    100674 <getc+0x71>
  if (c=='\r')			/* user CR -> '\n' */
  100642:	83 7d f4 0d          	cmpl   $0xd,-0xc(%ebp)
  100646:	75 07                	jne    10064f <getc+0x4c>
    c = '\n';
  100648:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
  if (c==ESCAPE_TO_TUTOR)
  10064f:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
  100653:	75 01                	jne    100656 <getc+0x53>
    breakpoint();		/* special escape to Tutor */
  100655:	cc                   	int3   
  if (dev==CONSOLE)
  100656:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  10065a:	75 15                	jne    100671 <getc+0x6e>
    putc(dev, c);		/* echo for CONSOLE */
  10065c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10065f:	0f be c0             	movsbl %al,%eax
  100662:	83 ec 08             	sub    $0x8,%esp
  100665:	50                   	push   %eax
  100666:	ff 75 08             	pushl  0x8(%ebp)
  100669:	e8 d8 fd ff ff       	call   100446 <putc>
  10066e:	83 c4 10             	add    $0x10,%esp
  return c;
  100671:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  100674:	c9                   	leave  
  100675:	c3                   	ret    

00100676 <readyc>:


/* check if char ready to be getc'd (returns Boolean) */
int readyc(int dev)
{
  100676:	f3 0f 1e fb          	endbr32 
  10067a:	55                   	push   %ebp
  10067b:	89 e5                	mov    %esp,%ebp
  10067d:	53                   	push   %ebx
  10067e:	83 ec 04             	sub    $0x4,%esp
  100681:	e8 b6 fa ff ff       	call   10013c <__x86.get_pc_thunk.bx>
  100686:	81 c3 06 16 00 00    	add    $0x1606,%ebx
  if (dev == CONSOLE)
  10068c:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  100690:	75 0e                	jne    1006a0 <readyc+0x2a>
    dev = sys_get_console_dev();
  100692:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  100698:	8b 40 1c             	mov    0x1c(%eax),%eax
  10069b:	ff d0                	call   *%eax
  10069d:	89 45 08             	mov    %eax,0x8(%ebp)
  if (dev < 0 || dev >= MAXSYSDEVS || !sys_devname(dev)[0])
  1006a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1006a4:	78 28                	js     1006ce <readyc+0x58>
  1006a6:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  1006aa:	7f 22                	jg     1006ce <readyc+0x58>
  1006ac:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1006b2:	8b 08                	mov    (%eax),%ecx
  1006b4:	8b 55 08             	mov    0x8(%ebp),%edx
  1006b7:	89 d0                	mov    %edx,%eax
  1006b9:	c1 e0 02             	shl    $0x2,%eax
  1006bc:	01 d0                	add    %edx,%eax
  1006be:	01 c0                	add    %eax,%eax
  1006c0:	01 d0                	add    %edx,%eax
  1006c2:	c1 e0 02             	shl    $0x2,%eax
  1006c5:	01 c8                	add    %ecx,%eax
  1006c7:	8a 40 18             	mov    0x18(%eax),%al
  1006ca:	84 c0                	test   %al,%al
  1006cc:	75 07                	jne    1006d5 <readyc+0x5f>
    return -1;
  1006ce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  1006d3:	eb 29                	jmp    1006fe <readyc+0x88>
  return sys_readyc(dev);
  1006d5:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1006db:	8b 08                	mov    (%eax),%ecx
  1006dd:	8b 55 08             	mov    0x8(%ebp),%edx
  1006e0:	89 d0                	mov    %edx,%eax
  1006e2:	c1 e0 02             	shl    $0x2,%eax
  1006e5:	01 d0                	add    %edx,%eax
  1006e7:	01 c0                	add    %eax,%eax
  1006e9:	01 d0                	add    %edx,%eax
  1006eb:	c1 e0 02             	shl    $0x2,%eax
  1006ee:	01 c8                	add    %ecx,%eax
  1006f0:	8b 40 0c             	mov    0xc(%eax),%eax
  1006f3:	83 ec 0c             	sub    $0xc,%esp
  1006f6:	ff 75 08             	pushl  0x8(%ebp)
  1006f9:	ff d0                	call   *%eax
  1006fb:	83 c4 10             	add    $0x10,%esp
}
  1006fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100701:	c9                   	leave  
  100702:	c3                   	ret    

00100703 <devcontrol>:

int devcontrol(int dev, int fn, void * param)
{
  100703:	f3 0f 1e fb          	endbr32 
  100707:	55                   	push   %ebp
  100708:	89 e5                	mov    %esp,%ebp
  10070a:	53                   	push   %ebx
  10070b:	83 ec 04             	sub    $0x4,%esp
  10070e:	e8 29 fa ff ff       	call   10013c <__x86.get_pc_thunk.bx>
  100713:	81 c3 79 15 00 00    	add    $0x1579,%ebx
  if (dev == CONSOLE)
  100719:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  10071d:	75 0e                	jne    10072d <devcontrol+0x2a>
    dev = sys_get_console_dev();
  10071f:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  100725:	8b 40 1c             	mov    0x1c(%eax),%eax
  100728:	ff d0                	call   *%eax
  10072a:	89 45 08             	mov    %eax,0x8(%ebp)
  if (dev < 0 || dev >= MAXSYSDEVS || !sys_devname(dev)[0])
  10072d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  100731:	78 28                	js     10075b <devcontrol+0x58>
  100733:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  100737:	7f 22                	jg     10075b <devcontrol+0x58>
  100739:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  10073f:	8b 08                	mov    (%eax),%ecx
  100741:	8b 55 08             	mov    0x8(%ebp),%edx
  100744:	89 d0                	mov    %edx,%eax
  100746:	c1 e0 02             	shl    $0x2,%eax
  100749:	01 d0                	add    %edx,%eax
  10074b:	01 c0                	add    %eax,%eax
  10074d:	01 d0                	add    %edx,%eax
  10074f:	c1 e0 02             	shl    $0x2,%eax
  100752:	01 c8                	add    %ecx,%eax
  100754:	8a 40 18             	mov    0x18(%eax),%al
  100757:	84 c0                	test   %al,%al
  100759:	75 07                	jne    100762 <devcontrol+0x5f>
    return -1;
  10075b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100760:	eb 2f                	jmp    100791 <devcontrol+0x8e>
  return sys_devcontrol(dev, fn, param);
  100762:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  100768:	8b 08                	mov    (%eax),%ecx
  10076a:	8b 55 08             	mov    0x8(%ebp),%edx
  10076d:	89 d0                	mov    %edx,%eax
  10076f:	c1 e0 02             	shl    $0x2,%eax
  100772:	01 d0                	add    %edx,%eax
  100774:	01 c0                	add    %eax,%eax
  100776:	01 d0                	add    %edx,%eax
  100778:	c1 e0 02             	shl    $0x2,%eax
  10077b:	01 c8                	add    %ecx,%eax
  10077d:	8b 40 10             	mov    0x10(%eax),%eax
  100780:	83 ec 04             	sub    $0x4,%esp
  100783:	ff 75 10             	pushl  0x10(%ebp)
  100786:	ff 75 0c             	pushl  0xc(%ebp)
  100789:	ff 75 08             	pushl  0x8(%ebp)
  10078c:	ff d0                	call   *%eax
  10078e:	83 c4 10             	add    $0x10,%esp
}
  100791:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100794:	c9                   	leave  
  100795:	c3                   	ret    

00100796 <devdescript>:

int devdescript(int dev, char *descript)
{  
  100796:	f3 0f 1e fb          	endbr32 
  10079a:	55                   	push   %ebp
  10079b:	89 e5                	mov    %esp,%ebp
  10079d:	53                   	push   %ebx
  10079e:	83 ec 04             	sub    $0x4,%esp
  1007a1:	e8 96 f9 ff ff       	call   10013c <__x86.get_pc_thunk.bx>
  1007a6:	81 c3 e6 14 00 00    	add    $0x14e6,%ebx
  if (dev == CONSOLE)
  1007ac:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  1007b0:	75 0e                	jne    1007c0 <devdescript+0x2a>
    dev = sys_get_console_dev();
  1007b2:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1007b8:	8b 40 1c             	mov    0x1c(%eax),%eax
  1007bb:	ff d0                	call   *%eax
  1007bd:	89 45 08             	mov    %eax,0x8(%ebp)
  if (dev < 0 || dev >= MAXSYSDEVS || !sys_devname(dev)[0])
  1007c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1007c4:	78 28                	js     1007ee <devdescript+0x58>
  1007c6:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  1007ca:	7f 22                	jg     1007ee <devdescript+0x58>
  1007cc:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1007d2:	8b 08                	mov    (%eax),%ecx
  1007d4:	8b 55 08             	mov    0x8(%ebp),%edx
  1007d7:	89 d0                	mov    %edx,%eax
  1007d9:	c1 e0 02             	shl    $0x2,%eax
  1007dc:	01 d0                	add    %edx,%eax
  1007de:	01 c0                	add    %eax,%eax
  1007e0:	01 d0                	add    %edx,%eax
  1007e2:	c1 e0 02             	shl    $0x2,%eax
  1007e5:	01 c8                	add    %ecx,%eax
  1007e7:	8a 40 18             	mov    0x18(%eax),%al
  1007ea:	84 c0                	test   %al,%al
  1007ec:	75 07                	jne    1007f5 <devdescript+0x5f>
    return -1;
  1007ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  1007f3:	eb 2c                	jmp    100821 <devdescript+0x8b>
  return sys_devdescript(dev, descript);
  1007f5:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  1007fb:	8b 08                	mov    (%eax),%ecx
  1007fd:	8b 55 08             	mov    0x8(%ebp),%edx
  100800:	89 d0                	mov    %edx,%eax
  100802:	c1 e0 02             	shl    $0x2,%eax
  100805:	01 d0                	add    %edx,%eax
  100807:	01 c0                	add    %eax,%eax
  100809:	01 d0                	add    %edx,%eax
  10080b:	c1 e0 02             	shl    $0x2,%eax
  10080e:	01 c8                	add    %ecx,%eax
  100810:	8b 40 14             	mov    0x14(%eax),%eax
  100813:	83 ec 08             	sub    $0x8,%esp
  100816:	ff 75 0c             	pushl  0xc(%ebp)
  100819:	ff 75 08             	pushl  0x8(%ebp)
  10081c:	ff d0                	call   *%eax
  10081e:	83 c4 10             	add    $0x10,%esp
}
  100821:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  100824:	c9                   	leave  
  100825:	c3                   	ret    

00100826 <devname>:
   
/*const char *devname(int dev) */
char *devname(int dev)
{
  100826:	f3 0f 1e fb          	endbr32 
  10082a:	55                   	push   %ebp
  10082b:	89 e5                	mov    %esp,%ebp
  10082d:	53                   	push   %ebx
  10082e:	83 ec 04             	sub    $0x4,%esp
  100831:	e8 06 f9 ff ff       	call   10013c <__x86.get_pc_thunk.bx>
  100836:	81 c3 56 14 00 00    	add    $0x1456,%ebx
  if (dev == CONSOLE)
  10083c:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  100840:	75 0e                	jne    100850 <devname+0x2a>
    dev = sys_get_console_dev();
  100842:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  100848:	8b 40 1c             	mov    0x1c(%eax),%eax
  10084b:	ff d0                	call   *%eax
  10084d:	89 45 08             	mov    %eax,0x8(%ebp)
  if (dev < 0 || dev >= MAXSYSDEVS || !sys_devname(dev)[0])
  100850:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  100854:	78 28                	js     10087e <devname+0x58>
  100856:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
  10085a:	7f 22                	jg     10087e <devname+0x58>
  10085c:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  100862:	8b 08                	mov    (%eax),%ecx
  100864:	8b 55 08             	mov    0x8(%ebp),%edx
  100867:	89 d0                	mov    %edx,%eax
  100869:	c1 e0 02             	shl    $0x2,%eax
  10086c:	01 d0                	add    %edx,%eax
  10086e:	01 c0                	add    %eax,%eax
  100870:	01 d0                	add    %edx,%eax
  100872:	c1 e0 02             	shl    $0x2,%eax
  100875:	01 c8                	add    %ecx,%eax
  100877:	8a 40 18             	mov    0x18(%eax),%al
  10087a:	84 c0                	test   %al,%al
  10087c:	75 07                	jne    100885 <devname+0x5f>
    return 0;
  10087e:	b8 00 00 00 00       	mov    $0x0,%eax
  100883:	eb 1e                	jmp    1008a3 <devname+0x7d>
  return sys_devname(dev);
  100885:	8b 83 b8 01 00 00    	mov    0x1b8(%ebx),%eax
  10088b:	8b 08                	mov    (%eax),%ecx
  10088d:	8b 55 08             	mov    0x8(%ebp),%edx
  100890:	89 d0                	mov    %edx,%eax
  100892:	c1 e0 02             	shl    $0x2,%eax
  100895:	01 d0                	add    %edx,%eax
  100897:	01 c0                	add    %eax,%eax
  100899:	01 d0                	add    %edx,%eax
  10089b:	c1 e0 02             	shl    $0x2,%eax
  10089e:	01 c8                	add    %ecx,%eax
  1008a0:	83 c0 18             	add    $0x18,%eax
}
  1008a3:	83 c4 04             	add    $0x4,%esp
  1008a6:	5b                   	pop    %ebx
  1008a7:	5d                   	pop    %ebp
  1008a8:	c3                   	ret    

001008a9 <__x86.get_pc_thunk.cx>:
  1008a9:	8b 0c 24             	mov    (%esp),%ecx
  1008ac:	c3                   	ret    

001008ad <_doscan>:
        int             (*getch)();     /* Function to get a character  */
        int             (*ungetch)();   /* Function to unget a character*/
        int             arg1;           /* 1st argument to getch/ungetch*/
        int             arg2;           /* 2nd argument to getch/ungetch*/
#endif
{
  1008ad:	f3 0f 1e fb          	endbr32 
  1008b1:	55                   	push   %ebp
  1008b2:	89 e5                	mov    %esp,%ebp
  1008b4:	56                   	push   %esi
  1008b5:	53                   	push   %ebx
  1008b6:	83 ec 20             	sub    $0x20,%esp
  1008b9:	e8 e7 06 00 00       	call   100fa5 <__x86.get_pc_thunk.si>
  1008be:	81 c6 ce 13 00 00    	add    $0x13ce,%esi
	register int ch;
	int nmatch, len, ch1;
	int **ptr, fileended, size;

	nmatch = 0;
  1008c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	fileended = 0;
  1008cb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	for (;;) switch (ch = *fmt++) {
  1008d2:	8b 45 08             	mov    0x8(%ebp),%eax
  1008d5:	8d 50 01             	lea    0x1(%eax),%edx
  1008d8:	89 55 08             	mov    %edx,0x8(%ebp)
  1008db:	8a 00                	mov    (%eax),%al
  1008dd:	0f be d8             	movsbl %al,%ebx
  1008e0:	83 fb 25             	cmp    $0x25,%ebx
  1008e3:	74 42                	je     100927 <_doscan+0x7a>
  1008e5:	83 fb 25             	cmp    $0x25,%ebx
  1008e8:	0f 8f e7 01 00 00    	jg     100ad5 <_doscan+0x228>
  1008ee:	83 fb 20             	cmp    $0x20,%ebx
  1008f1:	0f 84 9b 01 00 00    	je     100a92 <_doscan+0x1e5>
  1008f7:	83 fb 20             	cmp    $0x20,%ebx
  1008fa:	0f 8f d5 01 00 00    	jg     100ad5 <_doscan+0x228>
  100900:	85 db                	test   %ebx,%ebx
  100902:	74 1b                	je     10091f <_doscan+0x72>
  100904:	85 db                	test   %ebx,%ebx
  100906:	0f 88 c9 01 00 00    	js     100ad5 <_doscan+0x228>
  10090c:	89 d8                	mov    %ebx,%eax
  10090e:	83 e8 09             	sub    $0x9,%eax
  100911:	83 f8 01             	cmp    $0x1,%eax
  100914:	0f 87 bb 01 00 00    	ja     100ad5 <_doscan+0x228>
  10091a:	e9 73 01 00 00       	jmp    100a92 <_doscan+0x1e5>
	case '\0': 
		return (nmatch);
  10091f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100922:	e9 fc 01 00 00       	jmp    100b23 <_doscan+0x276>
	case '%': 
		if ((ch = *fmt++) == '%')
  100927:	8b 45 08             	mov    0x8(%ebp),%eax
  10092a:	8d 50 01             	lea    0x1(%eax),%edx
  10092d:	89 55 08             	mov    %edx,0x8(%ebp)
  100930:	8a 00                	mov    (%eax),%al
  100932:	0f be d8             	movsbl %al,%ebx
  100935:	83 fb 25             	cmp    $0x25,%ebx
  100938:	0f 84 96 01 00 00    	je     100ad4 <_doscan+0x227>
			goto def;
		ptr = 0;
  10093e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		if (ch != '*')
  100945:	83 fb 2a             	cmp    $0x2a,%ebx
  100948:	74 0e                	je     100958 <_doscan+0xab>
			ptr = argp++;
  10094a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10094d:	8d 50 04             	lea    0x4(%eax),%edx
  100950:	89 55 0c             	mov    %edx,0xc(%ebp)
  100953:	89 45 ec             	mov    %eax,-0x14(%ebp)
  100956:	eb 0e                	jmp    100966 <_doscan+0xb9>
		else
			ch = *fmt++;
  100958:	8b 45 08             	mov    0x8(%ebp),%eax
  10095b:	8d 50 01             	lea    0x1(%eax),%edx
  10095e:	89 55 08             	mov    %edx,0x8(%ebp)
  100961:	8a 00                	mov    (%eax),%al
  100963:	0f be d8             	movsbl %al,%ebx
		len = 0;
  100966:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		size = REGULAR;
  10096d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
		while (isdigit(ch)) {
  100974:	eb 22                	jmp    100998 <_doscan+0xeb>
			len = len*10 + ch - '0';
  100976:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100979:	89 d0                	mov    %edx,%eax
  10097b:	c1 e0 02             	shl    $0x2,%eax
  10097e:	01 d0                	add    %edx,%eax
  100980:	01 c0                	add    %eax,%eax
  100982:	01 d8                	add    %ebx,%eax
  100984:	83 e8 30             	sub    $0x30,%eax
  100987:	89 45 f0             	mov    %eax,-0x10(%ebp)
			ch = *fmt++;
  10098a:	8b 45 08             	mov    0x8(%ebp),%eax
  10098d:	8d 50 01             	lea    0x1(%eax),%edx
  100990:	89 55 08             	mov    %edx,0x8(%ebp)
  100993:	8a 00                	mov    (%eax),%al
  100995:	0f be d8             	movsbl %al,%ebx
		while (isdigit(ch)) {
  100998:	89 d8                	mov    %ebx,%eax
  10099a:	8d 50 01             	lea    0x1(%eax),%edx
  10099d:	c7 c0 c0 1d 10 00    	mov    $0x101dc0,%eax
  1009a3:	01 d0                	add    %edx,%eax
  1009a5:	8a 00                	mov    (%eax),%al
  1009a7:	0f be c0             	movsbl %al,%eax
  1009aa:	83 e0 04             	and    $0x4,%eax
  1009ad:	85 c0                	test   %eax,%eax
  1009af:	75 c5                	jne    100976 <_doscan+0xc9>
		}
		if (len == 0)
  1009b1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1009b5:	75 07                	jne    1009be <_doscan+0x111>
			len = 30000;
  1009b7:	c7 45 f0 30 75 00 00 	movl   $0x7530,-0x10(%ebp)
		if (ch=='l') {
  1009be:	83 fb 6c             	cmp    $0x6c,%ebx
  1009c1:	75 17                	jne    1009da <_doscan+0x12d>
			ch = *fmt++;
  1009c3:	8b 45 08             	mov    0x8(%ebp),%eax
  1009c6:	8d 50 01             	lea    0x1(%eax),%edx
  1009c9:	89 55 08             	mov    %edx,0x8(%ebp)
  1009cc:	8a 00                	mov    (%eax),%al
  1009ce:	0f be d8             	movsbl %al,%ebx
			size = LONG;
  1009d1:	c7 45 e8 02 00 00 00 	movl   $0x2,-0x18(%ebp)
  1009d8:	eb 32                	jmp    100a0c <_doscan+0x15f>
		} else if (ch=='h') {
  1009da:	83 fb 68             	cmp    $0x68,%ebx
  1009dd:	75 17                	jne    1009f6 <_doscan+0x149>
			size = SHORT;
  1009df:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
			ch = *fmt++;
  1009e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1009e9:	8d 50 01             	lea    0x1(%eax),%edx
  1009ec:	89 55 08             	mov    %edx,0x8(%ebp)
  1009ef:	8a 00                	mov    (%eax),%al
  1009f1:	0f be d8             	movsbl %al,%ebx
  1009f4:	eb 16                	jmp    100a0c <_doscan+0x15f>
		} else if (ch=='[')
  1009f6:	83 fb 5b             	cmp    $0x5b,%ebx
  1009f9:	75 11                	jne    100a0c <_doscan+0x15f>
                        fmt = _getccl(fmt);
  1009fb:	83 ec 0c             	sub    $0xc,%esp
  1009fe:	ff 75 08             	pushl  0x8(%ebp)
  100a01:	e8 e5 04 00 00       	call   100eeb <_getccl>
  100a06:	83 c4 10             	add    $0x10,%esp
  100a09:	89 45 08             	mov    %eax,0x8(%ebp)
		if (isupper(ch)) {
  100a0c:	89 d8                	mov    %ebx,%eax
  100a0e:	8d 50 01             	lea    0x1(%eax),%edx
  100a11:	c7 c0 c0 1d 10 00    	mov    $0x101dc0,%eax
  100a17:	01 d0                	add    %edx,%eax
  100a19:	8a 00                	mov    (%eax),%al
  100a1b:	0f be c0             	movsbl %al,%eax
  100a1e:	83 e0 01             	and    $0x1,%eax
  100a21:	85 c0                	test   %eax,%eax
  100a23:	74 0a                	je     100a2f <_doscan+0x182>
			ch = tolower(ch);
  100a25:	83 c3 20             	add    $0x20,%ebx
			size = LONG;
  100a28:	c7 45 e8 02 00 00 00 	movl   $0x2,-0x18(%ebp)
		}
		if (ch == '\0')
  100a2f:	85 db                	test   %ebx,%ebx
  100a31:	75 0a                	jne    100a3d <_doscan+0x190>
			return(-1);
  100a33:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100a38:	e9 e6 00 00 00       	jmp    100b23 <_doscan+0x276>
                if (_innum(ptr, ch, len, size, getch, ungetch, 
  100a3d:	83 ec 0c             	sub    $0xc,%esp
  100a40:	8d 45 e0             	lea    -0x20(%ebp),%eax
  100a43:	50                   	push   %eax
  100a44:	ff 75 1c             	pushl  0x1c(%ebp)
  100a47:	ff 75 18             	pushl  0x18(%ebp)
  100a4a:	ff 75 14             	pushl  0x14(%ebp)
  100a4d:	ff 75 10             	pushl  0x10(%ebp)
  100a50:	ff 75 e8             	pushl  -0x18(%ebp)
  100a53:	ff 75 f0             	pushl  -0x10(%ebp)
  100a56:	53                   	push   %ebx
  100a57:	ff 75 ec             	pushl  -0x14(%ebp)
  100a5a:	e8 cb 00 00 00       	call   100b2a <_innum>
  100a5f:	83 c4 30             	add    $0x30,%esp
  100a62:	85 c0                	test   %eax,%eax
  100a64:	74 09                	je     100a6f <_doscan+0x1c2>
                        arg1, arg2, &fileended) && ptr)
  100a66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  100a6a:	74 03                	je     100a6f <_doscan+0x1c2>
			nmatch++;
  100a6c:	ff 45 f4             	incl   -0xc(%ebp)
		if (fileended)
  100a6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100a72:	85 c0                	test   %eax,%eax
  100a74:	0f 84 9d 00 00 00    	je     100b17 <_doscan+0x26a>
			return(nmatch? nmatch: -1);
  100a7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  100a7e:	74 08                	je     100a88 <_doscan+0x1db>
  100a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100a83:	e9 9b 00 00 00       	jmp    100b23 <_doscan+0x276>
  100a88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100a8d:	e9 91 00 00 00       	jmp    100b23 <_doscan+0x276>
		break;

	case ' ':
	case '\n':
	case '\t': 
                while ((ch1 = (*getch)(arg1, (int *)arg2))==' '
  100a92:	90                   	nop
  100a93:	8b 45 1c             	mov    0x1c(%ebp),%eax
  100a96:	83 ec 08             	sub    $0x8,%esp
  100a99:	50                   	push   %eax
  100a9a:	ff 75 18             	pushl  0x18(%ebp)
  100a9d:	8b 45 10             	mov    0x10(%ebp),%eax
  100aa0:	ff d0                	call   *%eax
  100aa2:	83 c4 10             	add    $0x10,%esp
  100aa5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  100aa8:	83 7d e4 20          	cmpl   $0x20,-0x1c(%ebp)
  100aac:	74 e5                	je     100a93 <_doscan+0x1e6>
		       || ch1=='\t' || ch1=='\n' )
  100aae:	83 7d e4 09          	cmpl   $0x9,-0x1c(%ebp)
  100ab2:	74 df                	je     100a93 <_doscan+0x1e6>
  100ab4:	83 7d e4 0a          	cmpl   $0xa,-0x1c(%ebp)
  100ab8:	74 d9                	je     100a93 <_doscan+0x1e6>
                        ;
		if (ch1 != EOF)
  100aba:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
  100abe:	74 5d                	je     100b1d <_doscan+0x270>
                        (*ungetch)(arg1, (int *)arg2);
  100ac0:	8b 45 1c             	mov    0x1c(%ebp),%eax
  100ac3:	83 ec 08             	sub    $0x8,%esp
  100ac6:	50                   	push   %eax
  100ac7:	ff 75 18             	pushl  0x18(%ebp)
  100aca:	8b 45 14             	mov    0x14(%ebp),%eax
  100acd:	ff d0                	call   *%eax
  100acf:	83 c4 10             	add    $0x10,%esp
		break;
  100ad2:	eb 49                	jmp    100b1d <_doscan+0x270>
			goto def;
  100ad4:	90                   	nop

	default: 
	def:
                ch1 = (*getch)(arg1, (int *)arg2);
  100ad5:	8b 45 1c             	mov    0x1c(%ebp),%eax
  100ad8:	83 ec 08             	sub    $0x8,%esp
  100adb:	50                   	push   %eax
  100adc:	ff 75 18             	pushl  0x18(%ebp)
  100adf:	8b 45 10             	mov    0x10(%ebp),%eax
  100ae2:	ff d0                	call   *%eax
  100ae4:	83 c4 10             	add    $0x10,%esp
  100ae7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (ch1 != ch) {
  100aea:	39 5d e4             	cmp    %ebx,-0x1c(%ebp)
  100aed:	0f 84 df fd ff ff    	je     1008d2 <_doscan+0x25>
			if (ch1==EOF)
  100af3:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
  100af7:	75 07                	jne    100b00 <_doscan+0x253>
				return(-1);
  100af9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100afe:	eb 23                	jmp    100b23 <_doscan+0x276>
                        (*ungetch)(arg1, (int *)arg2);
  100b00:	8b 45 1c             	mov    0x1c(%ebp),%eax
  100b03:	83 ec 08             	sub    $0x8,%esp
  100b06:	50                   	push   %eax
  100b07:	ff 75 18             	pushl  0x18(%ebp)
  100b0a:	8b 45 14             	mov    0x14(%ebp),%eax
  100b0d:	ff d0                	call   *%eax
  100b0f:	83 c4 10             	add    $0x10,%esp
			return(nmatch);
  100b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100b15:	eb 0c                	jmp    100b23 <_doscan+0x276>
		break;
  100b17:	90                   	nop
  100b18:	e9 b5 fd ff ff       	jmp    1008d2 <_doscan+0x25>
		break;
  100b1d:	90                   	nop
	for (;;) switch (ch = *fmt++) {
  100b1e:	e9 af fd ff ff       	jmp    1008d2 <_doscan+0x25>
		}
	}
}
  100b23:	8d 65 f8             	lea    -0x8(%ebp),%esp
  100b26:	5b                   	pop    %ebx
  100b27:	5e                   	pop    %esi
  100b28:	5d                   	pop    %ebp
  100b29:	c3                   	ret    

00100b2a <_innum>:

static int _innum(int **ptr, int type, int len, int size,
		  int (*getch)(int, int *), int (*ungetch)(int, int *),
		  int arg1, int arg2, int *eofptr)
{
  100b2a:	f3 0f 1e fb          	endbr32 
  100b2e:	55                   	push   %ebp
  100b2f:	89 e5                	mov    %esp,%ebp
  100b31:	57                   	push   %edi
  100b32:	56                   	push   %esi
  100b33:	53                   	push   %ebx
  100b34:	83 ec 6c             	sub    $0x6c,%esp
  100b37:	e8 da f6 ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  100b3c:	05 50 11 00 00       	add    $0x1150,%eax
  100b41:	89 45 94             	mov    %eax,-0x6c(%ebp)
        //int expseen, negflg, c1, ndigit;
        int negflg, c1, ndigit;
        long lcval;


	if (type=='c' || type=='s' || type=='[')
  100b44:	83 7d 0c 63          	cmpl   $0x63,0xc(%ebp)
  100b48:	74 0c                	je     100b56 <_innum+0x2c>
  100b4a:	83 7d 0c 73          	cmpl   $0x73,0xc(%ebp)
  100b4e:	74 06                	je     100b56 <_innum+0x2c>
  100b50:	83 7d 0c 5b          	cmpl   $0x5b,0xc(%ebp)
  100b54:	75 35                	jne    100b8b <_innum+0x61>
                return(_instr(ptr? *(char **)ptr: (char *)NULL, type, 
  100b56:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  100b5a:	74 07                	je     100b63 <_innum+0x39>
  100b5c:	8b 45 08             	mov    0x8(%ebp),%eax
  100b5f:	8b 00                	mov    (%eax),%eax
  100b61:	eb 05                	jmp    100b68 <_innum+0x3e>
  100b63:	b8 00 00 00 00       	mov    $0x0,%eax
  100b68:	ff 75 28             	pushl  0x28(%ebp)
  100b6b:	ff 75 24             	pushl  0x24(%ebp)
  100b6e:	ff 75 20             	pushl  0x20(%ebp)
  100b71:	ff 75 1c             	pushl  0x1c(%ebp)
  100b74:	ff 75 18             	pushl  0x18(%ebp)
  100b77:	ff 75 10             	pushl  0x10(%ebp)
  100b7a:	ff 75 0c             	pushl  0xc(%ebp)
  100b7d:	50                   	push   %eax
  100b7e:	e8 15 02 00 00       	call   100d98 <_instr>
  100b83:	83 c4 20             	add    $0x20,%esp
  100b86:	e9 05 02 00 00       	jmp    100d90 <_innum+0x266>
                        len, getch, ungetch, arg1, arg2, eofptr));
	lcval = 0;
  100b8b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	ndigit = 0;
  100b92:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	base = 10;
  100b99:	bf 0a 00 00 00       	mov    $0xa,%edi
	if (type=='o')
  100b9e:	83 7d 0c 6f          	cmpl   $0x6f,0xc(%ebp)
  100ba2:	75 07                	jne    100bab <_innum+0x81>
		base = 8;
  100ba4:	bf 08 00 00 00       	mov    $0x8,%edi
  100ba9:	eb 0b                	jmp    100bb6 <_innum+0x8c>
	else if (type=='x')
  100bab:	83 7d 0c 78          	cmpl   $0x78,0xc(%ebp)
  100baf:	75 05                	jne    100bb6 <_innum+0x8c>
		base = 16;
  100bb1:	bf 10 00 00 00       	mov    $0x10,%edi
	np = numbuf;
  100bb6:	8d 75 98             	lea    -0x68(%ebp),%esi
	//expseen = 0;
	negflg = 0;
  100bb9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/* ignore '\r' -- MECB returns '\r' for eol not '\n' (as in TS) -- joe */
        while ((c = (*getch)(arg1, (int *)arg2))==' ' ||
  100bc0:	90                   	nop
  100bc1:	8b 45 24             	mov    0x24(%ebp),%eax
  100bc4:	83 ec 08             	sub    $0x8,%esp
  100bc7:	50                   	push   %eax
  100bc8:	ff 75 20             	pushl  0x20(%ebp)
  100bcb:	8b 45 18             	mov    0x18(%ebp),%eax
  100bce:	ff d0                	call   *%eax
  100bd0:	83 c4 10             	add    $0x10,%esp
  100bd3:	89 c3                	mov    %eax,%ebx
  100bd5:	83 fb 20             	cmp    $0x20,%ebx
  100bd8:	74 e7                	je     100bc1 <_innum+0x97>
  100bda:	83 fb 09             	cmp    $0x9,%ebx
  100bdd:	74 e2                	je     100bc1 <_innum+0x97>
	       c=='\t' || c=='\n' || c=='\r') ;
  100bdf:	83 fb 0a             	cmp    $0xa,%ebx
  100be2:	74 dd                	je     100bc1 <_innum+0x97>
  100be4:	83 fb 0d             	cmp    $0xd,%ebx
  100be7:	74 d8                	je     100bc1 <_innum+0x97>
	if (c=='-') {
  100be9:	83 fb 2d             	cmp    $0x2d,%ebx
  100bec:	75 28                	jne    100c16 <_innum+0xec>
		negflg++;
  100bee:	ff 45 e4             	incl   -0x1c(%ebp)
		*np++ = c;
  100bf1:	89 f0                	mov    %esi,%eax
  100bf3:	8d 70 01             	lea    0x1(%eax),%esi
  100bf6:	88 da                	mov    %bl,%dl
  100bf8:	88 10                	mov    %dl,(%eax)
                c = (*getch)(arg1, (int *)arg2);
  100bfa:	8b 45 24             	mov    0x24(%ebp),%eax
  100bfd:	83 ec 08             	sub    $0x8,%esp
  100c00:	50                   	push   %eax
  100c01:	ff 75 20             	pushl  0x20(%ebp)
  100c04:	8b 45 18             	mov    0x18(%ebp),%eax
  100c07:	ff d0                	call   *%eax
  100c09:	83 c4 10             	add    $0x10,%esp
  100c0c:	89 c3                	mov    %eax,%ebx
		len--;
  100c0e:	ff 4d 10             	decl   0x10(%ebp)
  100c11:	e9 da 00 00 00       	jmp    100cf0 <_innum+0x1c6>
	} else if (c=='+') {
  100c16:	83 fb 2b             	cmp    $0x2b,%ebx
  100c19:	0f 85 d1 00 00 00    	jne    100cf0 <_innum+0x1c6>
		len--;
  100c1f:	ff 4d 10             	decl   0x10(%ebp)
                c = (*getch)(arg1, (int *)arg2);
  100c22:	8b 45 24             	mov    0x24(%ebp),%eax
  100c25:	83 ec 08             	sub    $0x8,%esp
  100c28:	50                   	push   %eax
  100c29:	ff 75 20             	pushl  0x20(%ebp)
  100c2c:	8b 45 18             	mov    0x18(%ebp),%eax
  100c2f:	ff d0                	call   *%eax
  100c31:	83 c4 10             	add    $0x10,%esp
  100c34:	89 c3                	mov    %eax,%ebx
	}
        for ( ; --len>=0; *np++ = c, c = (*getch)(arg1, (int *)arg2)) {
  100c36:	e9 b5 00 00 00       	jmp    100cf0 <_innum+0x1c6>
		if (isdigit(c)
  100c3b:	89 d8                	mov    %ebx,%eax
  100c3d:	8d 50 01             	lea    0x1(%eax),%edx
  100c40:	8b 45 94             	mov    -0x6c(%ebp),%eax
  100c43:	c7 c0 c0 1d 10 00    	mov    $0x101dc0,%eax
  100c49:	01 d0                	add    %edx,%eax
  100c4b:	8a 00                	mov    (%eax),%al
  100c4d:	0f be c0             	movsbl %al,%eax
  100c50:	83 e0 04             	and    $0x4,%eax
  100c53:	85 c0                	test   %eax,%eax
  100c55:	75 25                	jne    100c7c <_innum+0x152>
		 || ((base==16) && (('a'<=c && c<='f') || ('A'<=c && c<='F')))) {
  100c57:	83 ff 10             	cmp    $0x10,%edi
  100c5a:	0f 85 9d 00 00 00    	jne    100cfd <_innum+0x1d3>
  100c60:	83 fb 60             	cmp    $0x60,%ebx
  100c63:	7e 05                	jle    100c6a <_innum+0x140>
  100c65:	83 fb 66             	cmp    $0x66,%ebx
  100c68:	7e 12                	jle    100c7c <_innum+0x152>
  100c6a:	83 fb 40             	cmp    $0x40,%ebx
  100c6d:	0f 8e 8a 00 00 00    	jle    100cfd <_innum+0x1d3>
  100c73:	83 fb 46             	cmp    $0x46,%ebx
  100c76:	0f 8f 81 00 00 00    	jg     100cfd <_innum+0x1d3>
			ndigit++;
  100c7c:	ff 45 e0             	incl   -0x20(%ebp)
			if (base==8)
  100c7f:	83 ff 08             	cmp    $0x8,%edi
  100c82:	75 06                	jne    100c8a <_innum+0x160>
				lcval <<=3;
  100c84:	c1 65 dc 03          	shll   $0x3,-0x24(%ebp)
  100c88:	eb 1f                	jmp    100ca9 <_innum+0x17f>
			else if (base==10)
  100c8a:	83 ff 0a             	cmp    $0xa,%edi
  100c8d:	75 16                	jne    100ca5 <_innum+0x17b>
				lcval = ((lcval<<2) + lcval)<<1;
  100c8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100c92:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  100c99:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100c9c:	01 d0                	add    %edx,%eax
  100c9e:	01 c0                	add    %eax,%eax
  100ca0:	89 45 dc             	mov    %eax,-0x24(%ebp)
  100ca3:	eb 04                	jmp    100ca9 <_innum+0x17f>
			else
				lcval <<= 4;
  100ca5:	c1 65 dc 04          	shll   $0x4,-0x24(%ebp)
			c1 = c;
  100ca9:	89 5d d8             	mov    %ebx,-0x28(%ebp)
			if ('0'<=c && c<='9')
  100cac:	83 fb 2f             	cmp    $0x2f,%ebx
  100caf:	7e 0a                	jle    100cbb <_innum+0x191>
  100cb1:	83 fb 39             	cmp    $0x39,%ebx
  100cb4:	7f 05                	jg     100cbb <_innum+0x191>
				c -= '0';
  100cb6:	83 eb 30             	sub    $0x30,%ebx
  100cb9:	eb 12                	jmp    100ccd <_innum+0x1a3>
			else if ('a'<=c && c<='f')
  100cbb:	83 fb 60             	cmp    $0x60,%ebx
  100cbe:	7e 0a                	jle    100cca <_innum+0x1a0>
  100cc0:	83 fb 66             	cmp    $0x66,%ebx
  100cc3:	7f 05                	jg     100cca <_innum+0x1a0>
				c -= 'a'-10;
  100cc5:	83 eb 57             	sub    $0x57,%ebx
  100cc8:	eb 03                	jmp    100ccd <_innum+0x1a3>
			else
				c -= 'A'-10;
  100cca:	83 eb 37             	sub    $0x37,%ebx
			lcval += c;
  100ccd:	01 5d dc             	add    %ebx,-0x24(%ebp)
                        c = c1;
  100cd0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
        for ( ; --len>=0; *np++ = c, c = (*getch)(arg1, (int *)arg2)) {
  100cd3:	89 f0                	mov    %esi,%eax
  100cd5:	8d 70 01             	lea    0x1(%eax),%esi
  100cd8:	88 da                	mov    %bl,%dl
  100cda:	88 10                	mov    %dl,(%eax)
  100cdc:	8b 45 24             	mov    0x24(%ebp),%eax
  100cdf:	83 ec 08             	sub    $0x8,%esp
  100ce2:	50                   	push   %eax
  100ce3:	ff 75 20             	pushl  0x20(%ebp)
  100ce6:	8b 45 18             	mov    0x18(%ebp),%eax
  100ce9:	ff d0                	call   *%eax
  100ceb:	83 c4 10             	add    $0x10,%esp
  100cee:	89 c3                	mov    %eax,%ebx
  100cf0:	ff 4d 10             	decl   0x10(%ebp)
  100cf3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100cf7:	0f 89 3e ff ff ff    	jns    100c3b <_innum+0x111>
			continue;
		} else
			break;
	}
	if (negflg)
  100cfd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
  100d01:	74 03                	je     100d06 <_innum+0x1dc>
		lcval = -lcval;
  100d03:	f7 5d dc             	negl   -0x24(%ebp)
	if (c != EOF) {
  100d06:	83 fb ff             	cmp    $0xffffffff,%ebx
  100d09:	74 1d                	je     100d28 <_innum+0x1fe>
                (*ungetch)(arg1, (int *)arg2);
  100d0b:	8b 45 24             	mov    0x24(%ebp),%eax
  100d0e:	83 ec 08             	sub    $0x8,%esp
  100d11:	50                   	push   %eax
  100d12:	ff 75 20             	pushl  0x20(%ebp)
  100d15:	8b 45 1c             	mov    0x1c(%ebp),%eax
  100d18:	ff d0                	call   *%eax
  100d1a:	83 c4 10             	add    $0x10,%esp
		*eofptr = 0;
  100d1d:	8b 45 28             	mov    0x28(%ebp),%eax
  100d20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  100d26:	eb 09                	jmp    100d31 <_innum+0x207>
	} else
		*eofptr = 1;
  100d28:	8b 45 28             	mov    0x28(%ebp),%eax
  100d2b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	if (ptr==NULL || np==numbuf)
  100d31:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  100d35:	74 07                	je     100d3e <_innum+0x214>
  100d37:	8d 45 98             	lea    -0x68(%ebp),%eax
  100d3a:	39 c6                	cmp    %eax,%esi
  100d3c:	75 07                	jne    100d45 <_innum+0x21b>
		return(0);
  100d3e:	b8 00 00 00 00       	mov    $0x0,%eax
  100d43:	eb 4b                	jmp    100d90 <_innum+0x266>
	*np++ = 0;
  100d45:	89 f0                	mov    %esi,%eax
  100d47:	8d 70 01             	lea    0x1(%eax),%esi
  100d4a:	c6 00 00             	movb   $0x0,(%eax)
        switch(size) {
  100d4d:	83 7d 14 02          	cmpl   $0x2,0x14(%ebp)
  100d51:	74 2d                	je     100d80 <_innum+0x256>
  100d53:	83 7d 14 02          	cmpl   $0x2,0x14(%ebp)
  100d57:	7f 32                	jg     100d8b <_innum+0x261>
  100d59:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  100d5d:	74 08                	je     100d67 <_innum+0x23d>
  100d5f:	83 7d 14 01          	cmpl   $0x1,0x14(%ebp)
  100d63:	74 0f                	je     100d74 <_innum+0x24a>
  100d65:	eb 24                	jmp    100d8b <_innum+0x261>

        case SHORT:
		**(short **)ptr = lcval;
  100d67:	8b 45 08             	mov    0x8(%ebp),%eax
  100d6a:	8b 10                	mov    (%eax),%edx
  100d6c:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100d6f:	66 89 02             	mov    %ax,(%edx)
		break;
  100d72:	eb 17                	jmp    100d8b <_innum+0x261>

        case REGULAR:
		**(int **)ptr = lcval;
  100d74:	8b 45 08             	mov    0x8(%ebp),%eax
  100d77:	8b 00                	mov    (%eax),%eax
  100d79:	8b 55 dc             	mov    -0x24(%ebp),%edx
  100d7c:	89 10                	mov    %edx,(%eax)
		break;
  100d7e:	eb 0b                	jmp    100d8b <_innum+0x261>

        case LONG:
		**(long **)ptr = lcval;
  100d80:	8b 45 08             	mov    0x8(%ebp),%eax
  100d83:	8b 00                	mov    (%eax),%eax
  100d85:	8b 55 dc             	mov    -0x24(%ebp),%edx
  100d88:	89 10                	mov    %edx,(%eax)
		break;
  100d8a:	90                   	nop
	}
	return(1);
  100d8b:	b8 01 00 00 00       	mov    $0x1,%eax
}
  100d90:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100d93:	5b                   	pop    %ebx
  100d94:	5e                   	pop    %esi
  100d95:	5f                   	pop    %edi
  100d96:	5d                   	pop    %ebp
  100d97:	c3                   	ret    

00100d98 <_instr>:

static int _instr(char *ptr, int type, int len,
		  int (*getch)(int, int *), int (*ungetch)(int, int *),
		  int arg1, int arg2, int *eofptr)
{
  100d98:	f3 0f 1e fb          	endbr32 
  100d9c:	55                   	push   %ebp
  100d9d:	89 e5                	mov    %esp,%ebp
  100d9f:	57                   	push   %edi
  100da0:	56                   	push   %esi
  100da1:	53                   	push   %ebx
  100da2:	83 ec 1c             	sub    $0x1c,%esp
  100da5:	e8 fb 01 00 00       	call   100fa5 <__x86.get_pc_thunk.si>
  100daa:	81 c6 e2 0e 00 00    	add    $0xee2,%esi
	register int ch;
	register char *optr;
	int ignstp;

	if (eofptr) *eofptr = 0;
  100db0:	83 7d 24 00          	cmpl   $0x0,0x24(%ebp)
  100db4:	74 09                	je     100dbf <_instr+0x27>
  100db6:	8b 45 24             	mov    0x24(%ebp),%eax
  100db9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	optr = ptr;
  100dbf:	8b 7d 08             	mov    0x8(%ebp),%edi
	if (type=='c' && len==30000)
  100dc2:	83 7d 0c 63          	cmpl   $0x63,0xc(%ebp)
  100dc6:	75 10                	jne    100dd8 <_instr+0x40>
  100dc8:	81 7d 10 30 75 00 00 	cmpl   $0x7530,0x10(%ebp)
  100dcf:	75 07                	jne    100dd8 <_instr+0x40>
		len = 1;
  100dd1:	c7 45 10 01 00 00 00 	movl   $0x1,0x10(%ebp)
	ignstp = 0;
  100dd8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if (type=='s')
  100ddf:	83 7d 0c 73          	cmpl   $0x73,0xc(%ebp)
  100de3:	75 0e                	jne    100df3 <_instr+0x5b>
		ignstp = SPC;
  100de5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
        while (_sctab[ch = (*getch)(arg1, (int *)arg2)] & ignstp)
  100dec:	eb 05                	jmp    100df3 <_instr+0x5b>
		if (ch==EOF)
  100dee:	83 fb ff             	cmp    $0xffffffff,%ebx
  100df1:	74 27                	je     100e1a <_instr+0x82>
        while (_sctab[ch = (*getch)(arg1, (int *)arg2)] & ignstp)
  100df3:	8b 45 20             	mov    0x20(%ebp),%eax
  100df6:	83 ec 08             	sub    $0x8,%esp
  100df9:	50                   	push   %eax
  100dfa:	ff 75 1c             	pushl  0x1c(%ebp)
  100dfd:	8b 45 14             	mov    0x14(%ebp),%eax
  100e00:	ff d0                	call   *%eax
  100e02:	83 c4 10             	add    $0x10,%esp
  100e05:	89 c3                	mov    %eax,%ebx
  100e07:	8a 84 1e b4 00 00 00 	mov    0xb4(%esi,%ebx,1),%al
  100e0e:	0f be c0             	movsbl %al,%eax
  100e11:	23 45 e4             	and    -0x1c(%ebp),%eax
  100e14:	85 c0                	test   %eax,%eax
  100e16:	75 d6                	jne    100dee <_instr+0x56>
  100e18:	eb 01                	jmp    100e1b <_instr+0x83>
			break;
  100e1a:	90                   	nop
	ignstp = SPC;
  100e1b:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	if (type=='c')
  100e22:	83 7d 0c 63          	cmpl   $0x63,0xc(%ebp)
  100e26:	75 09                	jne    100e31 <_instr+0x99>
		ignstp = 0;
  100e28:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  100e2f:	eb 3f                	jmp    100e70 <_instr+0xd8>
	else if (type=='[')
  100e31:	83 7d 0c 5b          	cmpl   $0x5b,0xc(%ebp)
  100e35:	75 39                	jne    100e70 <_instr+0xd8>
		ignstp = STP;
  100e37:	c7 45 e4 02 00 00 00 	movl   $0x2,-0x1c(%ebp)
	while (ch!=EOF && (_sctab[ch]&ignstp)==0) {
  100e3e:	eb 30                	jmp    100e70 <_instr+0xd8>
		if (ptr)
  100e40:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  100e44:	74 0d                	je     100e53 <_instr+0xbb>
			*ptr++ = ch;
  100e46:	8b 45 08             	mov    0x8(%ebp),%eax
  100e49:	8d 50 01             	lea    0x1(%eax),%edx
  100e4c:	89 55 08             	mov    %edx,0x8(%ebp)
  100e4f:	88 da                	mov    %bl,%dl
  100e51:	88 10                	mov    %dl,(%eax)
		if (--len <= 0)
  100e53:	ff 4d 10             	decl   0x10(%ebp)
  100e56:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100e5a:	7e 2c                	jle    100e88 <_instr+0xf0>
			break;
                ch = (*getch)(arg1, (int *)arg2);
  100e5c:	8b 45 20             	mov    0x20(%ebp),%eax
  100e5f:	83 ec 08             	sub    $0x8,%esp
  100e62:	50                   	push   %eax
  100e63:	ff 75 1c             	pushl  0x1c(%ebp)
  100e66:	8b 45 14             	mov    0x14(%ebp),%eax
  100e69:	ff d0                	call   *%eax
  100e6b:	83 c4 10             	add    $0x10,%esp
  100e6e:	89 c3                	mov    %eax,%ebx
	while (ch!=EOF && (_sctab[ch]&ignstp)==0) {
  100e70:	83 fb ff             	cmp    $0xffffffff,%ebx
  100e73:	74 14                	je     100e89 <_instr+0xf1>
  100e75:	8a 84 1e b4 00 00 00 	mov    0xb4(%esi,%ebx,1),%al
  100e7c:	0f be c0             	movsbl %al,%eax
  100e7f:	23 45 e4             	and    -0x1c(%ebp),%eax
  100e82:	85 c0                	test   %eax,%eax
  100e84:	74 ba                	je     100e40 <_instr+0xa8>
  100e86:	eb 01                	jmp    100e89 <_instr+0xf1>
			break;
  100e88:	90                   	nop
	}
	if (ch != EOF) {
  100e89:	83 fb ff             	cmp    $0xffffffff,%ebx
  100e8c:	74 23                	je     100eb1 <_instr+0x119>
		if (len > 0)
  100e8e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100e92:	7e 12                	jle    100ea6 <_instr+0x10e>
                        (*ungetch)(arg1, (int *)arg2); 
  100e94:	8b 45 20             	mov    0x20(%ebp),%eax
  100e97:	83 ec 08             	sub    $0x8,%esp
  100e9a:	50                   	push   %eax
  100e9b:	ff 75 1c             	pushl  0x1c(%ebp)
  100e9e:	8b 45 18             	mov    0x18(%ebp),%eax
  100ea1:	ff d0                	call   *%eax
  100ea3:	83 c4 10             	add    $0x10,%esp
		*eofptr = 0;
  100ea6:	8b 45 24             	mov    0x24(%ebp),%eax
  100ea9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  100eaf:	eb 09                	jmp    100eba <_instr+0x122>
	} else
		*eofptr = 1;
  100eb1:	8b 45 24             	mov    0x24(%ebp),%eax
  100eb4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	if (ptr && ptr!=optr) {
  100eba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  100ebe:	74 1e                	je     100ede <_instr+0x146>
  100ec0:	39 7d 08             	cmp    %edi,0x8(%ebp)
  100ec3:	74 19                	je     100ede <_instr+0x146>
		if (type!='c')
  100ec5:	83 7d 0c 63          	cmpl   $0x63,0xc(%ebp)
  100ec9:	74 0c                	je     100ed7 <_instr+0x13f>
			*ptr++ = '\0';
  100ecb:	8b 45 08             	mov    0x8(%ebp),%eax
  100ece:	8d 50 01             	lea    0x1(%eax),%edx
  100ed1:	89 55 08             	mov    %edx,0x8(%ebp)
  100ed4:	c6 00 00             	movb   $0x0,(%eax)
		return(1);
  100ed7:	b8 01 00 00 00       	mov    $0x1,%eax
  100edc:	eb 05                	jmp    100ee3 <_instr+0x14b>
	}
	return(0);
  100ede:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100ee3:	8d 65 f4             	lea    -0xc(%ebp),%esp
  100ee6:	5b                   	pop    %ebx
  100ee7:	5e                   	pop    %esi
  100ee8:	5f                   	pop    %edi
  100ee9:	5d                   	pop    %ebp
  100eea:	c3                   	ret    

00100eeb <_getccl>:

static char * _getccl(char *s)
{
  100eeb:	f3 0f 1e fb          	endbr32 
  100eef:	55                   	push   %ebp
  100ef0:	89 e5                	mov    %esp,%ebp
  100ef2:	56                   	push   %esi
  100ef3:	53                   	push   %ebx
  100ef4:	e8 1d f3 ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  100ef9:	05 93 0d 00 00       	add    $0xd93,%eax
	register int c, t;

	t = 0;
  100efe:	be 00 00 00 00       	mov    $0x0,%esi
	if (*s == '^') {
  100f03:	8b 55 08             	mov    0x8(%ebp),%edx
  100f06:	8a 12                	mov    (%edx),%dl
  100f08:	80 fa 5e             	cmp    $0x5e,%dl
  100f0b:	75 04                	jne    100f11 <_getccl+0x26>
		t++;
  100f0d:	46                   	inc    %esi
		s++;
  100f0e:	ff 45 08             	incl   0x8(%ebp)
	}
	for (c = 0; c < 128; c++)
  100f11:	bb 00 00 00 00       	mov    $0x0,%ebx
  100f16:	eb 29                	jmp    100f41 <_getccl+0x56>
		if (t)
  100f18:	85 f6                	test   %esi,%esi
  100f1a:	74 13                	je     100f2f <_getccl+0x44>
			_sctab[c] &= ~STP;
  100f1c:	8a 94 18 b4 00 00 00 	mov    0xb4(%eax,%ebx,1),%dl
  100f23:	83 e2 fd             	and    $0xfffffffd,%edx
  100f26:	88 94 18 b4 00 00 00 	mov    %dl,0xb4(%eax,%ebx,1)
  100f2d:	eb 11                	jmp    100f40 <_getccl+0x55>
		else
			_sctab[c] |= STP;
  100f2f:	8a 94 18 b4 00 00 00 	mov    0xb4(%eax,%ebx,1),%dl
  100f36:	83 ca 02             	or     $0x2,%edx
  100f39:	88 94 18 b4 00 00 00 	mov    %dl,0xb4(%eax,%ebx,1)
	for (c = 0; c < 128; c++)
  100f40:	43                   	inc    %ebx
  100f41:	83 fb 7f             	cmp    $0x7f,%ebx
  100f44:	7e d2                	jle    100f18 <_getccl+0x2d>
	while (((c = *s++)&0177) != ']') {
  100f46:	eb 3e                	jmp    100f86 <_getccl+0x9b>
		if (t)
  100f48:	85 f6                	test   %esi,%esi
  100f4a:	74 18                	je     100f64 <_getccl+0x79>
			_sctab[c++] |= STP;
  100f4c:	89 da                	mov    %ebx,%edx
  100f4e:	8d 5a 01             	lea    0x1(%edx),%ebx
  100f51:	8a 8c 10 b4 00 00 00 	mov    0xb4(%eax,%edx,1),%cl
  100f58:	83 c9 02             	or     $0x2,%ecx
  100f5b:	88 8c 10 b4 00 00 00 	mov    %cl,0xb4(%eax,%edx,1)
  100f62:	eb 16                	jmp    100f7a <_getccl+0x8f>
		else
			_sctab[c++] &= ~STP;
  100f64:	89 da                	mov    %ebx,%edx
  100f66:	8d 5a 01             	lea    0x1(%edx),%ebx
  100f69:	8a 8c 10 b4 00 00 00 	mov    0xb4(%eax,%edx,1),%cl
  100f70:	83 e1 fd             	and    $0xfffffffd,%ecx
  100f73:	88 8c 10 b4 00 00 00 	mov    %cl,0xb4(%eax,%edx,1)
		if (c==0)
  100f7a:	85 db                	test   %ebx,%ebx
  100f7c:	75 08                	jne    100f86 <_getccl+0x9b>
			return(--s);
  100f7e:	ff 4d 08             	decl   0x8(%ebp)
  100f81:	8b 45 08             	mov    0x8(%ebp),%eax
  100f84:	eb 1b                	jmp    100fa1 <_getccl+0xb6>
	while (((c = *s++)&0177) != ']') {
  100f86:	8b 55 08             	mov    0x8(%ebp),%edx
  100f89:	8d 4a 01             	lea    0x1(%edx),%ecx
  100f8c:	89 4d 08             	mov    %ecx,0x8(%ebp)
  100f8f:	8a 12                	mov    (%edx),%dl
  100f91:	0f be da             	movsbl %dl,%ebx
  100f94:	89 da                	mov    %ebx,%edx
  100f96:	83 e2 7f             	and    $0x7f,%edx
  100f99:	83 fa 5d             	cmp    $0x5d,%edx
  100f9c:	75 aa                	jne    100f48 <_getccl+0x5d>
	}
	return(s);
  100f9e:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100fa1:	5b                   	pop    %ebx
  100fa2:	5e                   	pop    %esi
  100fa3:	5d                   	pop    %ebp
  100fa4:	c3                   	ret    

00100fa5 <__x86.get_pc_thunk.si>:
  100fa5:	8b 34 24             	mov    (%esp),%esi
  100fa8:	c3                   	ret    

00100fa9 <_fdoprnt>:
 * @param ap list of values
 * @param *func character output function
 * @param farg argument for character output function
 */
void _fdoprnt(char *fmt, va_list ap, int (*func) (int, int), int farg)
{
  100fa9:	f3 0f 1e fb          	endbr32 
  100fad:	55                   	push   %ebp
  100fae:	89 e5                	mov    %esp,%ebp
  100fb0:	53                   	push   %ebx
  100fb1:	83 ec 54             	sub    $0x54,%esp
  100fb4:	e8 83 f1 ff ff       	call   10013c <__x86.get_pc_thunk.bx>
  100fb9:	81 c3 d3 0c 00 00    	add    $0xcd3,%ebx
    long larg;

    for (;;)
    {
        /* Echo characters until '%' or end of fmt string */
        while ((c = *fmt++) != '%')
  100fbf:	eb 1b                	jmp    100fdc <_fdoprnt+0x33>
        {
            if (c == '\0')
  100fc1:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  100fc5:	0f 84 71 04 00 00    	je     10143c <.L20+0x162>
            {
                return;
            }
            (*func) (farg, c);
  100fcb:	83 ec 08             	sub    $0x8,%esp
  100fce:	ff 75 d0             	pushl  -0x30(%ebp)
  100fd1:	ff 75 14             	pushl  0x14(%ebp)
  100fd4:	8b 45 10             	mov    0x10(%ebp),%eax
  100fd7:	ff d0                	call   *%eax
  100fd9:	83 c4 10             	add    $0x10,%esp
        while ((c = *fmt++) != '%')
  100fdc:	8b 45 08             	mov    0x8(%ebp),%eax
  100fdf:	8d 50 01             	lea    0x1(%eax),%edx
  100fe2:	89 55 08             	mov    %edx,0x8(%ebp)
  100fe5:	8a 00                	mov    (%eax),%al
  100fe7:	0f be c0             	movsbl %al,%eax
  100fea:	89 45 d0             	mov    %eax,-0x30(%ebp)
  100fed:	83 7d d0 25          	cmpl   $0x25,-0x30(%ebp)
  100ff1:	75 ce                	jne    100fc1 <_fdoprnt+0x18>
        }
        /* Echo "...%%..." as '%' */
        if (*fmt == '%')
  100ff3:	8b 45 08             	mov    0x8(%ebp),%eax
  100ff6:	8a 00                	mov    (%eax),%al
  100ff8:	3c 25                	cmp    $0x25,%al
  100ffa:	75 22                	jne    10101e <_fdoprnt+0x75>
        {
            (*func) (farg, *fmt++);
  100ffc:	8b 45 08             	mov    0x8(%ebp),%eax
  100fff:	8d 50 01             	lea    0x1(%eax),%edx
  101002:	89 55 08             	mov    %edx,0x8(%ebp)
  101005:	8a 00                	mov    (%eax),%al
  101007:	0f be c0             	movsbl %al,%eax
  10100a:	83 ec 08             	sub    $0x8,%esp
  10100d:	50                   	push   %eax
  10100e:	ff 75 14             	pushl  0x14(%ebp)
  101011:	8b 45 10             	mov    0x10(%ebp),%eax
  101014:	ff d0                	call   *%eax
  101016:	83 c4 10             	add    $0x10,%esp
            continue;
  101019:	e9 19 04 00 00       	jmp    101437 <.L20+0x15d>
        }
        /* Check for "%-..." == Left-justified output */
        if ((leftjust = ((*fmt == '-')) ? 1 : 0))
  10101e:	8b 45 08             	mov    0x8(%ebp),%eax
  101021:	8a 00                	mov    (%eax),%al
  101023:	3c 2d                	cmp    $0x2d,%al
  101025:	0f 94 c0             	sete   %al
  101028:	25 ff 00 00 00       	and    $0xff,%eax
  10102d:	89 45 cc             	mov    %eax,-0x34(%ebp)
  101030:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
  101034:	74 03                	je     101039 <_fdoprnt+0x90>
        {
            fmt++;
  101036:	ff 45 08             	incl   0x8(%ebp)
        }
        /* Allow for zero-filled numeric outputs ("%0...") */
        fill = (*fmt == '0') ? *fmt++ : ' ';
  101039:	8b 45 08             	mov    0x8(%ebp),%eax
  10103c:	8a 00                	mov    (%eax),%al
  10103e:	3c 30                	cmp    $0x30,%al
  101040:	75 0d                	jne    10104f <_fdoprnt+0xa6>
  101042:	8b 45 08             	mov    0x8(%ebp),%eax
  101045:	8d 50 01             	lea    0x1(%eax),%edx
  101048:	89 55 08             	mov    %edx,0x8(%ebp)
  10104b:	8a 00                	mov    (%eax),%al
  10104d:	eb 02                	jmp    101051 <_fdoprnt+0xa8>
  10104f:	b0 20                	mov    $0x20,%al
  101051:	88 45 eb             	mov    %al,-0x15(%ebp)
        /* Allow for minimum field width specifier for %d,u,x,o,c,s */
        /* Also allow %* for variable width (%0* as well)       */
        fmin = 0;
  101054:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        if (*fmt == '*')
  10105b:	8b 45 08             	mov    0x8(%ebp),%eax
  10105e:	8a 00                	mov    (%eax),%al
  101060:	3c 2a                	cmp    $0x2a,%al
  101062:	75 37                	jne    10109b <_fdoprnt+0xf2>
        {
            fmin = va_arg(ap, int);
  101064:	8b 45 0c             	mov    0xc(%ebp),%eax
  101067:	8d 50 04             	lea    0x4(%eax),%edx
  10106a:	89 55 0c             	mov    %edx,0xc(%ebp)
  10106d:	8b 00                	mov    (%eax),%eax
  10106f:	89 45 e0             	mov    %eax,-0x20(%ebp)

            ++fmt;
  101072:	ff 45 08             	incl   0x8(%ebp)
  101075:	eb 36                	jmp    1010ad <_fdoprnt+0x104>
        }
        else
        {
            while ('0' <= *fmt && *fmt <= '9')
            {
                fmin = fmin * 10 + *fmt++ - '0';
  101077:	8b 55 e0             	mov    -0x20(%ebp),%edx
  10107a:	89 d0                	mov    %edx,%eax
  10107c:	c1 e0 02             	shl    $0x2,%eax
  10107f:	01 d0                	add    %edx,%eax
  101081:	01 c0                	add    %eax,%eax
  101083:	89 c1                	mov    %eax,%ecx
  101085:	8b 45 08             	mov    0x8(%ebp),%eax
  101088:	8d 50 01             	lea    0x1(%eax),%edx
  10108b:	89 55 08             	mov    %edx,0x8(%ebp)
  10108e:	8a 00                	mov    (%eax),%al
  101090:	0f be c0             	movsbl %al,%eax
  101093:	01 c8                	add    %ecx,%eax
  101095:	83 e8 30             	sub    $0x30,%eax
  101098:	89 45 e0             	mov    %eax,-0x20(%ebp)
            while ('0' <= *fmt && *fmt <= '9')
  10109b:	8b 45 08             	mov    0x8(%ebp),%eax
  10109e:	8a 00                	mov    (%eax),%al
  1010a0:	3c 2f                	cmp    $0x2f,%al
  1010a2:	7e 09                	jle    1010ad <_fdoprnt+0x104>
  1010a4:	8b 45 08             	mov    0x8(%ebp),%eax
  1010a7:	8a 00                	mov    (%eax),%al
  1010a9:	3c 39                	cmp    $0x39,%al
  1010ab:	7e ca                	jle    101077 <_fdoprnt+0xce>
            }
        }
        /* Allow for maximum string width for %s */
        fmax = 0;
  1010ad:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (*fmt == '.')
  1010b4:	8b 45 08             	mov    0x8(%ebp),%eax
  1010b7:	8a 00                	mov    (%eax),%al
  1010b9:	3c 2e                	cmp    $0x2e,%al
  1010bb:	75 55                	jne    101112 <_fdoprnt+0x169>
        {
            if (*(++fmt) == '*')
  1010bd:	ff 45 08             	incl   0x8(%ebp)
  1010c0:	8b 45 08             	mov    0x8(%ebp),%eax
  1010c3:	8a 00                	mov    (%eax),%al
  1010c5:	3c 2a                	cmp    $0x2a,%al
  1010c7:	75 37                	jne    101100 <_fdoprnt+0x157>
            {
                fmax = va_arg(ap, int);
  1010c9:	8b 45 0c             	mov    0xc(%ebp),%eax
  1010cc:	8d 50 04             	lea    0x4(%eax),%edx
  1010cf:	89 55 0c             	mov    %edx,0xc(%ebp)
  1010d2:	8b 00                	mov    (%eax),%eax
  1010d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ++fmt;
  1010d7:	ff 45 08             	incl   0x8(%ebp)
  1010da:	eb 36                	jmp    101112 <_fdoprnt+0x169>
            }
            else
            {
                while ('0' <= *fmt && *fmt <= '9')
                {
                    fmax = fmax * 10 + *fmt++ - '0';
  1010dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  1010df:	89 d0                	mov    %edx,%eax
  1010e1:	c1 e0 02             	shl    $0x2,%eax
  1010e4:	01 d0                	add    %edx,%eax
  1010e6:	01 c0                	add    %eax,%eax
  1010e8:	89 c1                	mov    %eax,%ecx
  1010ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1010ed:	8d 50 01             	lea    0x1(%eax),%edx
  1010f0:	89 55 08             	mov    %edx,0x8(%ebp)
  1010f3:	8a 00                	mov    (%eax),%al
  1010f5:	0f be c0             	movsbl %al,%eax
  1010f8:	01 c8                	add    %ecx,%eax
  1010fa:	83 e8 30             	sub    $0x30,%eax
  1010fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                while ('0' <= *fmt && *fmt <= '9')
  101100:	8b 45 08             	mov    0x8(%ebp),%eax
  101103:	8a 00                	mov    (%eax),%al
  101105:	3c 2f                	cmp    $0x2f,%al
  101107:	7e 09                	jle    101112 <_fdoprnt+0x169>
  101109:	8b 45 08             	mov    0x8(%ebp),%eax
  10110c:	8a 00                	mov    (%eax),%al
  10110e:	3c 39                	cmp    $0x39,%al
  101110:	7e ca                	jle    1010dc <_fdoprnt+0x133>
                }
            }
        }

        str = string;
  101112:	8d 45 b4             	lea    -0x4c(%ebp),%eax
  101115:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if ((f = *fmt++) == '\0')
  101118:	8b 45 08             	mov    0x8(%ebp),%eax
  10111b:	8d 50 01             	lea    0x1(%eax),%edx
  10111e:	89 55 08             	mov    %edx,0x8(%ebp)
  101121:	8a 00                	mov    (%eax),%al
  101123:	0f be c0             	movsbl %al,%eax
  101126:	89 45 c8             	mov    %eax,-0x38(%ebp)
  101129:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
  10112d:	75 15                	jne    101144 <_fdoprnt+0x19b>
        {
            (*func) (farg, '%');
  10112f:	83 ec 08             	sub    $0x8,%esp
  101132:	6a 25                	push   $0x25
  101134:	ff 75 14             	pushl  0x14(%ebp)
  101137:	8b 45 10             	mov    0x10(%ebp),%eax
  10113a:	ff d0                	call   *%eax
  10113c:	83 c4 10             	add    $0x10,%esp
            return;
  10113f:	e9 f9 02 00 00       	jmp    10143d <.L20+0x163>
        }
        sign = '\0';            /* sign == '-' for negative decimal */
  101144:	c6 45 db 00          	movb   $0x0,-0x25(%ebp)
  101148:	8b 45 c8             	mov    -0x38(%ebp),%eax
  10114b:	83 e8 58             	sub    $0x58,%eax
  10114e:	83 f8 20             	cmp    $0x20,%eax
  101151:	0f 87 83 01 00 00    	ja     1012da <.L20>
  101157:	c1 e0 02             	shl    $0x2,%eax
  10115a:	8b 84 18 0c fb ff ff 	mov    -0x4f4(%eax,%ebx,1),%eax
  101161:	01 d8                	add    %ebx,%eax
  101163:	3e ff e0             	notrack jmp *%eax

00101166 <.L27>:

        switch (f)
        {
        case 'c':
            string[0] = va_arg(ap, int);
  101166:	8b 45 0c             	mov    0xc(%ebp),%eax
  101169:	8d 50 04             	lea    0x4(%eax),%edx
  10116c:	89 55 0c             	mov    %edx,0xc(%ebp)
  10116f:	8b 00                	mov    (%eax),%eax
  101171:	88 45 b4             	mov    %al,-0x4c(%ebp)
            string[1] = '\0';
  101174:	c6 45 b5 00          	movb   $0x0,-0x4b(%ebp)
            fmax = 0;
  101178:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            fill = ' ';
  10117f:	c6 45 eb 20          	movb   $0x20,-0x15(%ebp)
            break;
  101183:	e9 64 01 00 00       	jmp    1012ec <.L20+0x12>

00101188 <.L24>:

        case 's':
            str = va_arg(ap, char *);
  101188:	8b 45 0c             	mov    0xc(%ebp),%eax
  10118b:	8d 50 04             	lea    0x4(%eax),%edx
  10118e:	89 55 0c             	mov    %edx,0xc(%ebp)
  101191:	8b 00                	mov    (%eax),%eax
  101193:	89 45 f0             	mov    %eax,-0x10(%ebp)

            if (NULL == str)
  101196:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  10119a:	75 09                	jne    1011a5 <.L24+0x1d>
            {
                str = "(null)";
  10119c:	8d 83 04 fb ff ff    	lea    -0x4fc(%ebx),%eax
  1011a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
            }
            fill = ' ';
  1011a5:	c6 45 eb 20          	movb   $0x20,-0x15(%ebp)
            break;
  1011a9:	e9 3e 01 00 00       	jmp    1012ec <.L20+0x12>

001011ae <.L26>:

        case 'd':
            larg = va_arg(ap, long);
  1011ae:	8b 45 0c             	mov    0xc(%ebp),%eax
  1011b1:	8d 50 04             	lea    0x4(%eax),%edx
  1011b4:	89 55 0c             	mov    %edx,0xc(%ebp)
  1011b7:	8b 00                	mov    (%eax),%eax
  1011b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)

            if (larg < 0)
  1011bc:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  1011c0:	79 07                	jns    1011c9 <.L26+0x1b>
            {
                sign = '-';
  1011c2:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
                larg = -larg;
  1011c6:	f7 5d d4             	negl   -0x2c(%ebp)
            }
            _prtl10(larg, str);
  1011c9:	83 ec 08             	sub    $0x8,%esp
  1011cc:	ff 75 f0             	pushl  -0x10(%ebp)
  1011cf:	ff 75 d4             	pushl  -0x2c(%ebp)
  1011d2:	e8 6b 02 00 00       	call   101442 <_prtl10>
  1011d7:	83 c4 10             	add    $0x10,%esp
            break;
  1011da:	e9 0d 01 00 00       	jmp    1012ec <.L20+0x12>

001011df <.L23>:

        case 'u':
            digit1 = '\0';
  1011df:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
            /* "negative" longs in unsigned format  */
            /* can't be computed with long division */
            /* convert *args to "positive", digit1  */
            /* = how much to add back afterwards    */
            larg = va_arg(ap, long);
  1011e3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1011e6:	8d 50 04             	lea    0x4(%eax),%edx
  1011e9:	89 55 0c             	mov    %edx,0xc(%ebp)
  1011ec:	8b 00                	mov    (%eax),%eax
  1011ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)

            while (larg < 0)
  1011f1:	eb 0e                	jmp    101201 <.L23+0x22>
            {
                larg -= 1000000000L;
  1011f3:	81 6d d4 00 ca 9a 3b 	subl   $0x3b9aca00,-0x2c(%ebp)
                ++digit1;
  1011fa:	8a 45 da             	mov    -0x26(%ebp),%al
  1011fd:	40                   	inc    %eax
  1011fe:	88 45 da             	mov    %al,-0x26(%ebp)
            while (larg < 0)
  101201:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  101205:	78 ec                	js     1011f3 <.L23+0x14>
            }
            _prtl10(larg, str);
  101207:	83 ec 08             	sub    $0x8,%esp
  10120a:	ff 75 f0             	pushl  -0x10(%ebp)
  10120d:	ff 75 d4             	pushl  -0x2c(%ebp)
  101210:	e8 2d 02 00 00       	call   101442 <_prtl10>
  101215:	83 c4 10             	add    $0x10,%esp
            str[0] += digit1;
  101218:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10121b:	8a 00                	mov    (%eax),%al
  10121d:	88 c2                	mov    %al,%dl
  10121f:	8a 45 da             	mov    -0x26(%ebp),%al
  101222:	01 d0                	add    %edx,%eax
  101224:	88 c2                	mov    %al,%dl
  101226:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101229:	88 10                	mov    %dl,(%eax)
            fmax = 0;
  10122b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            break;
  101232:	e9 b5 00 00 00       	jmp    1012ec <.L20+0x12>

00101237 <.L25>:

        case 'o':
            larg = va_arg(ap, long);
  101237:	8b 45 0c             	mov    0xc(%ebp),%eax
  10123a:	8d 50 04             	lea    0x4(%eax),%edx
  10123d:	89 55 0c             	mov    %edx,0xc(%ebp)
  101240:	8b 00                	mov    (%eax),%eax
  101242:	89 45 d4             	mov    %eax,-0x2c(%ebp)

            _prtl8(larg, str);
  101245:	83 ec 08             	sub    $0x8,%esp
  101248:	ff 75 f0             	pushl  -0x10(%ebp)
  10124b:	ff 75 d4             	pushl  -0x2c(%ebp)
  10124e:	e8 9b 02 00 00       	call   1014ee <_prtl8>
  101253:	83 c4 10             	add    $0x10,%esp
            fmax = 0;
  101256:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            break;
  10125d:	e9 8a 00 00 00       	jmp    1012ec <.L20+0x12>

00101262 <.L29>:

        case 'X':
            larg = va_arg(ap, long);
  101262:	8b 45 0c             	mov    0xc(%ebp),%eax
  101265:	8d 50 04             	lea    0x4(%eax),%edx
  101268:	89 55 0c             	mov    %edx,0xc(%ebp)
  10126b:	8b 00                	mov    (%eax),%eax
  10126d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

            _prtX16(larg, str);
  101270:	83 ec 08             	sub    $0x8,%esp
  101273:	ff 75 f0             	pushl  -0x10(%ebp)
  101276:	ff 75 d4             	pushl  -0x2c(%ebp)
  101279:	e8 94 03 00 00       	call   101612 <_prtX16>
  10127e:	83 c4 10             	add    $0x10,%esp
            fmax = 0;
  101281:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            break;
  101288:	eb 62                	jmp    1012ec <.L20+0x12>

0010128a <.L21>:

        case 'x':
            larg = va_arg(ap, long);
  10128a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10128d:	8d 50 04             	lea    0x4(%eax),%edx
  101290:	89 55 0c             	mov    %edx,0xc(%ebp)
  101293:	8b 00                	mov    (%eax),%eax
  101295:	89 45 d4             	mov    %eax,-0x2c(%ebp)

            _prtl16(larg, str);
  101298:	83 ec 08             	sub    $0x8,%esp
  10129b:	ff 75 f0             	pushl  -0x10(%ebp)
  10129e:	ff 75 d4             	pushl  -0x2c(%ebp)
  1012a1:	e8 db 02 00 00       	call   101581 <_prtl16>
  1012a6:	83 c4 10             	add    $0x10,%esp
            fmax = 0;
  1012a9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            break;
  1012b0:	eb 3a                	jmp    1012ec <.L20+0x12>

001012b2 <.L28>:

        case 'b':
            larg = va_arg(ap, long);
  1012b2:	8b 45 0c             	mov    0xc(%ebp),%eax
  1012b5:	8d 50 04             	lea    0x4(%eax),%edx
  1012b8:	89 55 0c             	mov    %edx,0xc(%ebp)
  1012bb:	8b 00                	mov    (%eax),%eax
  1012bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)

            _prtl2(larg, str);
  1012c0:	83 ec 08             	sub    $0x8,%esp
  1012c3:	ff 75 f0             	pushl  -0x10(%ebp)
  1012c6:	ff 75 d4             	pushl  -0x2c(%ebp)
  1012c9:	e8 d5 03 00 00       	call   1016a3 <_prtl2>
  1012ce:	83 c4 10             	add    $0x10,%esp
            fmax = 0;
  1012d1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            break;
  1012d8:	eb 12                	jmp    1012ec <.L20+0x12>

001012da <.L20>:

        default:
            (*func) (farg, f);
  1012da:	83 ec 08             	sub    $0x8,%esp
  1012dd:	ff 75 c8             	pushl  -0x38(%ebp)
  1012e0:	ff 75 14             	pushl  0x14(%ebp)
  1012e3:	8b 45 10             	mov    0x10(%ebp),%eax
  1012e6:	ff d0                	call   *%eax
  1012e8:	83 c4 10             	add    $0x10,%esp
            break;
  1012eb:	90                   	nop
        }
        for (length = 0; str[length] != '\0'; length++)
  1012ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1012f3:	eb 03                	jmp    1012f8 <.L20+0x1e>
  1012f5:	ff 45 ec             	incl   -0x14(%ebp)
  1012f8:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1012fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1012fe:	01 d0                	add    %edx,%eax
  101300:	8a 00                	mov    (%eax),%al
  101302:	84 c0                	test   %al,%al
  101304:	75 ef                	jne    1012f5 <.L20+0x1b>
        {;
        }
        if (fmin > MAXSTR || fmin < 0)
  101306:	83 7d e0 50          	cmpl   $0x50,-0x20(%ebp)
  10130a:	7f 06                	jg     101312 <.L20+0x38>
  10130c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  101310:	79 07                	jns    101319 <.L20+0x3f>
        {
            fmin = 0;
  101312:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        }
        if (fmax > MAXSTR || fmax < 0)
  101319:	83 7d e4 50          	cmpl   $0x50,-0x1c(%ebp)
  10131d:	7f 06                	jg     101325 <.L20+0x4b>
  10131f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
  101323:	79 07                	jns    10132c <.L20+0x52>
        {
            fmax = 0;
  101325:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
        leading = 0;
  10132c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
        if (fmax != 0 || fmin != 0)
  101333:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
  101337:	75 06                	jne    10133f <.L20+0x65>
  101339:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  10133d:	74 2c                	je     10136b <.L20+0x91>
        {
            if (fmax != 0)
  10133f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
  101343:	74 0e                	je     101353 <.L20+0x79>
            {
                if (length > fmax)
  101345:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101348:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  10134b:	7e 06                	jle    101353 <.L20+0x79>
                {
                    length = fmax;
  10134d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  101350:	89 45 ec             	mov    %eax,-0x14(%ebp)
                }
            }
            if (fmin != 0)
  101353:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  101357:	74 09                	je     101362 <.L20+0x88>
            {
                leading = fmin - length;
  101359:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10135c:	2b 45 ec             	sub    -0x14(%ebp),%eax
  10135f:	89 45 dc             	mov    %eax,-0x24(%ebp)
            }
            if (sign == '-')
  101362:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
  101366:	75 03                	jne    10136b <.L20+0x91>
            {
                --leading;
  101368:	ff 4d dc             	decl   -0x24(%ebp)
            }
        }
        if (sign == '-' && fill == '0')
  10136b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
  10136f:	75 19                	jne    10138a <.L20+0xb0>
  101371:	80 7d eb 30          	cmpb   $0x30,-0x15(%ebp)
  101375:	75 13                	jne    10138a <.L20+0xb0>
        {
            (*func) (farg, sign);
  101377:	0f be 45 db          	movsbl -0x25(%ebp),%eax
  10137b:	83 ec 08             	sub    $0x8,%esp
  10137e:	50                   	push   %eax
  10137f:	ff 75 14             	pushl  0x14(%ebp)
  101382:	8b 45 10             	mov    0x10(%ebp),%eax
  101385:	ff d0                	call   *%eax
  101387:	83 c4 10             	add    $0x10,%esp
        }
        if (leftjust == 0)
  10138a:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
  10138e:	75 27                	jne    1013b7 <.L20+0xdd>
        {
            for (i = 0; i < leading; i++)
  101390:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  101397:	eb 16                	jmp    1013af <.L20+0xd5>
            {
                (*func) (farg, fill);
  101399:	0f be 45 eb          	movsbl -0x15(%ebp),%eax
  10139d:	83 ec 08             	sub    $0x8,%esp
  1013a0:	50                   	push   %eax
  1013a1:	ff 75 14             	pushl  0x14(%ebp)
  1013a4:	8b 45 10             	mov    0x10(%ebp),%eax
  1013a7:	ff d0                	call   *%eax
  1013a9:	83 c4 10             	add    $0x10,%esp
            for (i = 0; i < leading; i++)
  1013ac:	ff 45 f4             	incl   -0xc(%ebp)
  1013af:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1013b2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  1013b5:	7c e2                	jl     101399 <.L20+0xbf>
            }
        }
        if (sign == '-' && fill == ' ')
  1013b7:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
  1013bb:	75 19                	jne    1013d6 <.L20+0xfc>
  1013bd:	80 7d eb 20          	cmpb   $0x20,-0x15(%ebp)
  1013c1:	75 13                	jne    1013d6 <.L20+0xfc>
        {
            (*func) (farg, sign);
  1013c3:	0f be 45 db          	movsbl -0x25(%ebp),%eax
  1013c7:	83 ec 08             	sub    $0x8,%esp
  1013ca:	50                   	push   %eax
  1013cb:	ff 75 14             	pushl  0x14(%ebp)
  1013ce:	8b 45 10             	mov    0x10(%ebp),%eax
  1013d1:	ff d0                	call   *%eax
  1013d3:	83 c4 10             	add    $0x10,%esp
        }
        for (i = 0; i < length; i++)
  1013d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1013dd:	eb 1f                	jmp    1013fe <.L20+0x124>
        {
            (*func) (farg, str[i]);
  1013df:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1013e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1013e5:	01 d0                	add    %edx,%eax
  1013e7:	8a 00                	mov    (%eax),%al
  1013e9:	0f be c0             	movsbl %al,%eax
  1013ec:	83 ec 08             	sub    $0x8,%esp
  1013ef:	50                   	push   %eax
  1013f0:	ff 75 14             	pushl  0x14(%ebp)
  1013f3:	8b 45 10             	mov    0x10(%ebp),%eax
  1013f6:	ff d0                	call   *%eax
  1013f8:	83 c4 10             	add    $0x10,%esp
        for (i = 0; i < length; i++)
  1013fb:	ff 45 f4             	incl   -0xc(%ebp)
  1013fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101401:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  101404:	7c d9                	jl     1013df <.L20+0x105>
        }
        if (leftjust != 0)
  101406:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
  10140a:	0f 84 cc fb ff ff    	je     100fdc <_fdoprnt+0x33>
        {
            for (i = 0; i < leading; i++)
  101410:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  101417:	eb 16                	jmp    10142f <.L20+0x155>
                (*func) (farg, fill);
  101419:	0f be 45 eb          	movsbl -0x15(%ebp),%eax
  10141d:	83 ec 08             	sub    $0x8,%esp
  101420:	50                   	push   %eax
  101421:	ff 75 14             	pushl  0x14(%ebp)
  101424:	8b 45 10             	mov    0x10(%ebp),%eax
  101427:	ff d0                	call   *%eax
  101429:	83 c4 10             	add    $0x10,%esp
            for (i = 0; i < leading; i++)
  10142c:	ff 45 f4             	incl   -0xc(%ebp)
  10142f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101432:	3b 45 dc             	cmp    -0x24(%ebp),%eax
  101435:	7c e2                	jl     101419 <.L20+0x13f>
        while ((c = *fmt++) != '%')
  101437:	e9 a0 fb ff ff       	jmp    100fdc <_fdoprnt+0x33>
                return;
  10143c:	90                   	nop
        }
    }

}
  10143d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  101440:	c9                   	leave  
  101441:	c3                   	ret    

00101442 <_prtl10>:
 * Prints
 * @param num
 * @param *str
 */
static void _prtl10(long num, char *str)
{
  101442:	f3 0f 1e fb          	endbr32 
  101446:	55                   	push   %ebp
  101447:	89 e5                	mov    %esp,%ebp
  101449:	83 ec 10             	sub    $0x10,%esp
  10144c:	e8 c5 ed ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  101451:	05 3b 08 00 00       	add    $0x83b,%eax
    int i;
    char temp[11];

    temp[0] = '\0';
  101456:	c6 45 f1 00          	movb   $0x0,-0xf(%ebp)
    for (i = 1; i <= 10; i++)
  10145a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  101461:	eb 3e                	jmp    1014a1 <_prtl10+0x5f>
    {
        temp[i] = num % 10 + '0';
  101463:	8b 45 08             	mov    0x8(%ebp),%eax
  101466:	b9 0a 00 00 00       	mov    $0xa,%ecx
  10146b:	89 c2                	mov    %eax,%edx
  10146d:	c1 fa 1f             	sar    $0x1f,%edx
  101470:	f7 f9                	idiv   %ecx
  101472:	89 d0                	mov    %edx,%eax
  101474:	83 c0 30             	add    $0x30,%eax
  101477:	88 c2                	mov    %al,%dl
  101479:	8d 4d f1             	lea    -0xf(%ebp),%ecx
  10147c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10147f:	01 c8                	add    %ecx,%eax
  101481:	88 10                	mov    %dl,(%eax)
        num /= 10;
  101483:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101486:	ba 67 66 66 66       	mov    $0x66666667,%edx
  10148b:	89 c8                	mov    %ecx,%eax
  10148d:	f7 ea                	imul   %edx
  10148f:	c1 fa 02             	sar    $0x2,%edx
  101492:	89 c8                	mov    %ecx,%eax
  101494:	c1 f8 1f             	sar    $0x1f,%eax
  101497:	29 c2                	sub    %eax,%edx
  101499:	89 d0                	mov    %edx,%eax
  10149b:	89 45 08             	mov    %eax,0x8(%ebp)
    for (i = 1; i <= 10; i++)
  10149e:	ff 45 fc             	incl   -0x4(%ebp)
  1014a1:	83 7d fc 0a          	cmpl   $0xa,-0x4(%ebp)
  1014a5:	7e bc                	jle    101463 <_prtl10+0x21>
    }
    for (i = 10; temp[i] == '0'; i--);
  1014a7:	c7 45 fc 0a 00 00 00 	movl   $0xa,-0x4(%ebp)
  1014ae:	eb 03                	jmp    1014b3 <_prtl10+0x71>
  1014b0:	ff 4d fc             	decl   -0x4(%ebp)
  1014b3:	8d 55 f1             	lea    -0xf(%ebp),%edx
  1014b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1014b9:	01 d0                	add    %edx,%eax
  1014bb:	8a 00                	mov    (%eax),%al
  1014bd:	3c 30                	cmp    $0x30,%al
  1014bf:	74 ef                	je     1014b0 <_prtl10+0x6e>
    if (i == 0)
  1014c1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  1014c5:	75 1d                	jne    1014e4 <_prtl10+0xa2>
        i++;
  1014c7:	ff 45 fc             	incl   -0x4(%ebp)
    while (i >= 0)
  1014ca:	eb 18                	jmp    1014e4 <_prtl10+0xa2>
        *str++ = temp[i--];
  1014cc:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1014cf:	8d 42 ff             	lea    -0x1(%edx),%eax
  1014d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
  1014d5:	8b 45 0c             	mov    0xc(%ebp),%eax
  1014d8:	8d 48 01             	lea    0x1(%eax),%ecx
  1014db:	89 4d 0c             	mov    %ecx,0xc(%ebp)
  1014de:	8a 54 15 f1          	mov    -0xf(%ebp,%edx,1),%dl
  1014e2:	88 10                	mov    %dl,(%eax)
    while (i >= 0)
  1014e4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  1014e8:	79 e2                	jns    1014cc <_prtl10+0x8a>
}
  1014ea:	90                   	nop
  1014eb:	90                   	nop
  1014ec:	c9                   	leave  
  1014ed:	c3                   	ret    

001014ee <_prtl8>:
 * Prints 
 * @param num
 * @param *str
 */
static void _prtl8(long num, char *str)
{
  1014ee:	f3 0f 1e fb          	endbr32 
  1014f2:	55                   	push   %ebp
  1014f3:	89 e5                	mov    %esp,%ebp
  1014f5:	83 ec 10             	sub    $0x10,%esp
  1014f8:	e8 19 ed ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  1014fd:	05 8f 07 00 00       	add    $0x78f,%eax
    int i;
    char temp[12];

    temp[0] = '\0';
  101502:	c6 45 f0 00          	movb   $0x0,-0x10(%ebp)
    for (i = 1; i <= 11; i++)
  101506:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  10150d:	eb 1c                	jmp    10152b <_prtl8+0x3d>
    {
        temp[i] = (num & 07) + '0';
  10150f:	8b 45 08             	mov    0x8(%ebp),%eax
  101512:	83 e0 07             	and    $0x7,%eax
  101515:	83 c0 30             	add    $0x30,%eax
  101518:	88 c2                	mov    %al,%dl
  10151a:	8d 4d f0             	lea    -0x10(%ebp),%ecx
  10151d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101520:	01 c8                	add    %ecx,%eax
  101522:	88 10                	mov    %dl,(%eax)
        num = num >> 3;
  101524:	c1 7d 08 03          	sarl   $0x3,0x8(%ebp)
    for (i = 1; i <= 11; i++)
  101528:	ff 45 fc             	incl   -0x4(%ebp)
  10152b:	83 7d fc 0b          	cmpl   $0xb,-0x4(%ebp)
  10152f:	7e de                	jle    10150f <_prtl8+0x21>
    }
    temp[11] &= '3';
  101531:	8a 45 fb             	mov    -0x5(%ebp),%al
  101534:	83 e0 33             	and    $0x33,%eax
  101537:	88 45 fb             	mov    %al,-0x5(%ebp)
    for (i = 11; temp[i] == '0'; i--);
  10153a:	c7 45 fc 0b 00 00 00 	movl   $0xb,-0x4(%ebp)
  101541:	eb 03                	jmp    101546 <_prtl8+0x58>
  101543:	ff 4d fc             	decl   -0x4(%ebp)
  101546:	8d 55 f0             	lea    -0x10(%ebp),%edx
  101549:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10154c:	01 d0                	add    %edx,%eax
  10154e:	8a 00                	mov    (%eax),%al
  101550:	3c 30                	cmp    $0x30,%al
  101552:	74 ef                	je     101543 <_prtl8+0x55>
    if (i == 0)
  101554:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  101558:	75 1d                	jne    101577 <_prtl8+0x89>
        i++;
  10155a:	ff 45 fc             	incl   -0x4(%ebp)
    while (i >= 0)
  10155d:	eb 18                	jmp    101577 <_prtl8+0x89>
        *str++ = temp[i--];
  10155f:	8b 55 fc             	mov    -0x4(%ebp),%edx
  101562:	8d 42 ff             	lea    -0x1(%edx),%eax
  101565:	89 45 fc             	mov    %eax,-0x4(%ebp)
  101568:	8b 45 0c             	mov    0xc(%ebp),%eax
  10156b:	8d 48 01             	lea    0x1(%eax),%ecx
  10156e:	89 4d 0c             	mov    %ecx,0xc(%ebp)
  101571:	8a 54 15 f0          	mov    -0x10(%ebp,%edx,1),%dl
  101575:	88 10                	mov    %dl,(%eax)
    while (i >= 0)
  101577:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  10157b:	79 e2                	jns    10155f <_prtl8+0x71>
}
  10157d:	90                   	nop
  10157e:	90                   	nop
  10157f:	c9                   	leave  
  101580:	c3                   	ret    

00101581 <_prtl16>:
 * Prints 
 * @param num
 * @param *str
 */
static void _prtl16(long num, char *str)
{
  101581:	f3 0f 1e fb          	endbr32 
  101585:	55                   	push   %ebp
  101586:	89 e5                	mov    %esp,%ebp
  101588:	53                   	push   %ebx
  101589:	83 ec 10             	sub    $0x10,%esp
  10158c:	e8 85 ec ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  101591:	05 fb 06 00 00       	add    $0x6fb,%eax
    int i;
    char temp[9];

    temp[0] = '\0';
  101596:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
    for (i = 1; i <= 8; i++)
  10159a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  1015a1:	eb 1e                	jmp    1015c1 <_prtl16+0x40>
    {
        temp[i] = "0123456789abcdef"[num & 0x0F];
  1015a3:	8b 55 08             	mov    0x8(%ebp),%edx
  1015a6:	83 e2 0f             	and    $0xf,%edx
  1015a9:	8a 94 10 90 fb ff ff 	mov    -0x470(%eax,%edx,1),%dl
  1015b0:	8d 5d ef             	lea    -0x11(%ebp),%ebx
  1015b3:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  1015b6:	01 d9                	add    %ebx,%ecx
  1015b8:	88 11                	mov    %dl,(%ecx)
        num = num >> 4;
  1015ba:	c1 7d 08 04          	sarl   $0x4,0x8(%ebp)
    for (i = 1; i <= 8; i++)
  1015be:	ff 45 f8             	incl   -0x8(%ebp)
  1015c1:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
  1015c5:	7e dc                	jle    1015a3 <_prtl16+0x22>
    }
    for (i = 8; temp[i] == '0'; i--);
  1015c7:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
  1015ce:	eb 03                	jmp    1015d3 <_prtl16+0x52>
  1015d0:	ff 4d f8             	decl   -0x8(%ebp)
  1015d3:	8d 55 ef             	lea    -0x11(%ebp),%edx
  1015d6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1015d9:	01 d0                	add    %edx,%eax
  1015db:	8a 00                	mov    (%eax),%al
  1015dd:	3c 30                	cmp    $0x30,%al
  1015df:	74 ef                	je     1015d0 <_prtl16+0x4f>
    if (i == 0)
  1015e1:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  1015e5:	75 1d                	jne    101604 <_prtl16+0x83>
        i++;
  1015e7:	ff 45 f8             	incl   -0x8(%ebp)
    while (i >= 0)
  1015ea:	eb 18                	jmp    101604 <_prtl16+0x83>
        *str++ = temp[i--];
  1015ec:	8b 55 f8             	mov    -0x8(%ebp),%edx
  1015ef:	8d 42 ff             	lea    -0x1(%edx),%eax
  1015f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
  1015f5:	8b 45 0c             	mov    0xc(%ebp),%eax
  1015f8:	8d 48 01             	lea    0x1(%eax),%ecx
  1015fb:	89 4d 0c             	mov    %ecx,0xc(%ebp)
  1015fe:	8a 54 15 ef          	mov    -0x11(%ebp,%edx,1),%dl
  101602:	88 10                	mov    %dl,(%eax)
    while (i >= 0)
  101604:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  101608:	79 e2                	jns    1015ec <_prtl16+0x6b>
}
  10160a:	90                   	nop
  10160b:	90                   	nop
  10160c:	83 c4 10             	add    $0x10,%esp
  10160f:	5b                   	pop    %ebx
  101610:	5d                   	pop    %ebp
  101611:	c3                   	ret    

00101612 <_prtX16>:
 * Prints 
 * @param num
 * @param *str
 */
static void _prtX16(long num, char *str)
{
  101612:	f3 0f 1e fb          	endbr32 
  101616:	55                   	push   %ebp
  101617:	89 e5                	mov    %esp,%ebp
  101619:	53                   	push   %ebx
  10161a:	83 ec 10             	sub    $0x10,%esp
  10161d:	e8 f4 eb ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  101622:	05 6a 06 00 00       	add    $0x66a,%eax
    int i;
    char temp[9];

    temp[0] = '\0';
  101627:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
    for (i = 1; i <= 8; i++)
  10162b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
  101632:	eb 1e                	jmp    101652 <_prtX16+0x40>
    {
        temp[i] = "0123456789ABCDEF"[num & 0x0F];
  101634:	8b 55 08             	mov    0x8(%ebp),%edx
  101637:	83 e2 0f             	and    $0xf,%edx
  10163a:	8a 94 10 a1 fb ff ff 	mov    -0x45f(%eax,%edx,1),%dl
  101641:	8d 5d ef             	lea    -0x11(%ebp),%ebx
  101644:	8b 4d f8             	mov    -0x8(%ebp),%ecx
  101647:	01 d9                	add    %ebx,%ecx
  101649:	88 11                	mov    %dl,(%ecx)
        num = num >> 4;
  10164b:	c1 7d 08 04          	sarl   $0x4,0x8(%ebp)
    for (i = 1; i <= 8; i++)
  10164f:	ff 45 f8             	incl   -0x8(%ebp)
  101652:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)
  101656:	7e dc                	jle    101634 <_prtX16+0x22>
    }
    for (i = 8; temp[i] == '0'; i--);
  101658:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
  10165f:	eb 03                	jmp    101664 <_prtX16+0x52>
  101661:	ff 4d f8             	decl   -0x8(%ebp)
  101664:	8d 55 ef             	lea    -0x11(%ebp),%edx
  101667:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10166a:	01 d0                	add    %edx,%eax
  10166c:	8a 00                	mov    (%eax),%al
  10166e:	3c 30                	cmp    $0x30,%al
  101670:	74 ef                	je     101661 <_prtX16+0x4f>
    if (i == 0)
  101672:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  101676:	75 1d                	jne    101695 <_prtX16+0x83>
        i++;
  101678:	ff 45 f8             	incl   -0x8(%ebp)
    while (i >= 0)
  10167b:	eb 18                	jmp    101695 <_prtX16+0x83>
        *str++ = temp[i--];
  10167d:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101680:	8d 42 ff             	lea    -0x1(%edx),%eax
  101683:	89 45 f8             	mov    %eax,-0x8(%ebp)
  101686:	8b 45 0c             	mov    0xc(%ebp),%eax
  101689:	8d 48 01             	lea    0x1(%eax),%ecx
  10168c:	89 4d 0c             	mov    %ecx,0xc(%ebp)
  10168f:	8a 54 15 ef          	mov    -0x11(%ebp,%edx,1),%dl
  101693:	88 10                	mov    %dl,(%eax)
    while (i >= 0)
  101695:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  101699:	79 e2                	jns    10167d <_prtX16+0x6b>
}
  10169b:	90                   	nop
  10169c:	90                   	nop
  10169d:	83 c4 10             	add    $0x10,%esp
  1016a0:	5b                   	pop    %ebx
  1016a1:	5d                   	pop    %ebp
  1016a2:	c3                   	ret    

001016a3 <_prtl2>:
 * Prints 
 * @param num
 * @param *str
 */
static void _prtl2(long num, char *str)
{
  1016a3:	f3 0f 1e fb          	endbr32 
  1016a7:	55                   	push   %ebp
  1016a8:	89 e5                	mov    %esp,%ebp
  1016aa:	83 ec 30             	sub    $0x30,%esp
  1016ad:	e8 64 eb ff ff       	call   100216 <__x86.get_pc_thunk.ax>
  1016b2:	05 da 05 00 00       	add    $0x5da,%eax
    int i;
    char temp[35];

    temp[0] = '\0';
  1016b7:	c6 45 d9 00          	movb   $0x0,-0x27(%ebp)
    for (i = 1; i <= 32; i++)
  1016bb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
  1016c2:	eb 20                	jmp    1016e4 <_prtl2+0x41>
    {
        temp[i] = ((num % 2) == 0) ? '0' : '1';
  1016c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1016c7:	83 e0 01             	and    $0x1,%eax
  1016ca:	85 c0                	test   %eax,%eax
  1016cc:	75 04                	jne    1016d2 <_prtl2+0x2f>
  1016ce:	b0 30                	mov    $0x30,%al
  1016d0:	eb 02                	jmp    1016d4 <_prtl2+0x31>
  1016d2:	b0 31                	mov    $0x31,%al
  1016d4:	8d 4d d9             	lea    -0x27(%ebp),%ecx
  1016d7:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1016da:	01 ca                	add    %ecx,%edx
  1016dc:	88 02                	mov    %al,(%edx)
        num = num >> 1;
  1016de:	d1 7d 08             	sarl   0x8(%ebp)
    for (i = 1; i <= 32; i++)
  1016e1:	ff 45 fc             	incl   -0x4(%ebp)
  1016e4:	83 7d fc 20          	cmpl   $0x20,-0x4(%ebp)
  1016e8:	7e da                	jle    1016c4 <_prtl2+0x21>
    }
    for (i = 32; temp[i] == '0'; i--);
  1016ea:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%ebp)
  1016f1:	eb 03                	jmp    1016f6 <_prtl2+0x53>
  1016f3:	ff 4d fc             	decl   -0x4(%ebp)
  1016f6:	8d 55 d9             	lea    -0x27(%ebp),%edx
  1016f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1016fc:	01 d0                	add    %edx,%eax
  1016fe:	8a 00                	mov    (%eax),%al
  101700:	3c 30                	cmp    $0x30,%al
  101702:	74 ef                	je     1016f3 <_prtl2+0x50>
    if (i == 0)
  101704:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  101708:	75 1d                	jne    101727 <_prtl2+0x84>
        i++;
  10170a:	ff 45 fc             	incl   -0x4(%ebp)
    while (i >= 0)
  10170d:	eb 18                	jmp    101727 <_prtl2+0x84>
        *str++ = temp[i--];
  10170f:	8b 55 fc             	mov    -0x4(%ebp),%edx
  101712:	8d 42 ff             	lea    -0x1(%edx),%eax
  101715:	89 45 fc             	mov    %eax,-0x4(%ebp)
  101718:	8b 45 0c             	mov    0xc(%ebp),%eax
  10171b:	8d 48 01             	lea    0x1(%eax),%ecx
  10171e:	89 4d 0c             	mov    %ecx,0xc(%ebp)
  101721:	8a 54 15 d9          	mov    -0x27(%ebp,%edx,1),%dl
  101725:	88 10                	mov    %dl,(%eax)
    while (i >= 0)
  101727:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  10172b:	79 e2                	jns    10170f <_prtl2+0x6c>
}
  10172d:	90                   	nop
  10172e:	90                   	nop
  10172f:	c9                   	leave  
  101730:	c3                   	ret    
